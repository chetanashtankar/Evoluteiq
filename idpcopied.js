/* Add your JS code Here */

debugger;
let pdfDoc = null;
let totalPagesDisplay = 0;
let scale = 1;
let fileName = "Visible Emission Cert";
let pdfBase64 = ""
const pdfContainer = document.createElement('div');
pdfContainer.id = 'pdf-container';

try {
    loadPdf(pdfBase64, pdfContainer);
}
catch (error) {
    console.log("Error in loading pdfs" + error);
}
try {
    createPDFViewer(pdfContainer, fileName);
}
catch (error) {
    console.log("Error in creating pdf tool bars" + error);
}

try {
    createSVGContainer();
}
catch (error) {
    console.log("Error Creating SVG Container")
}
try {
    resizeBar();
}
catch (error) {
    console.log("Error in creating Resize bars" + error);
}
function resizeBar() {
    const container = document.getElementById('platform_id_4mszTiuY');

    // Check if the container exists
    if (container) {
        // Assuming the two columns are direct children of the container:
        const columns = container.children;

        // Ensure there are at least two columns
        if (columns.length >= 2) {
            // Select the second column (the one that comes after the first column)
            const secondColumn = columns[1];

            // Create the new div element
            const resizeBar = document.createElement('div');

            // Add the 'resize-bar' class to it
            resizeBar.className = 'resize-bar';

            // Insert the new div between the two columns by placing it before the second column
            container.insertBefore(resizeBar, secondColumn);
        }
    }

    /*resize button icon add code*/
    const buttonContent = document.createElement('button');
    buttonContent.classList.add('icon-button');
    const icon = document.createElement('i');
    icon.classList.add('fa', 'fa-bars');
    buttonContent.appendChild(icon);
    const resizeBarContent = document.querySelector('.resize-bar');
    resizeBarContent.append(buttonContent);

    resizeBar = document.querySelector('.resize-bar button');
    leftContainer = document.querySelector('#platform_id_4mszTiuY-2');
    rightContainer = document.querySelector('#platform_id_4mszTiuY-3');

    resizeBar.addEventListener('mousedown', (e) => {
        debugger;
        const startX = e.clientX;
        const startWidth = leftContainer.offsetWidth;
        const rightWidth = rightContainer.offsetWidth;

        const onMouseMove = (e) => {
            const leftNewWidth = startWidth + (e.clientX - startX);
            leftContainer.style.width = `${leftNewWidth}px`;
            const tabContents = document.querySelectorAll('#tab-container .tab-content');
            tabContents.forEach(function (divContent) {
                divContent.style.width = `${leftNewWidth - 20}px`;
            });
            const rightNewWidth = rightWidth + (startX - e.clientX);
            rightContainer.style.width = `${rightNewWidth}px`;
        };

        const onMouseUp = () => {
            document.removeEventListener('mousemove', onMouseMove);
            document.removeEventListener('mouseup', onMouseUp);
        };

        document.addEventListener('mousemove', onMouseMove);
        document.addEventListener('mouseup', onMouseUp);
    });
}

function loadPdf(base64Data, pdfContainer) {
    const pdfData = atob(base64Data);
    const typedArray = new Uint8Array(pdfData.length);
    for (let i = 0; i < pdfData.length; i++) {
        typedArray[i] = pdfData.charCodeAt(i);
    }
    delete Array.prototype._indexOf;

    pdfjsLib.getDocument({ data: typedArray }).promise
        .then(function (pdfDoc_) {
            pdfDoc = pdfDoc_;
            totalPagesDisplay.textContent = pdfDoc.numPages;
            renderAllPages(pdfContainer);


            setTimeout(selectAndHighlight, 2000);
        })
        .catch(function (error) {
            console.error('Error loading PDF:', error);
        });
}

function renderAllPages(pdfContainer) {
    const totalPages = pdfDoc.numPages;
    for (let pageNum = 1; pageNum <= totalPages; pageNum++) {
        renderPage(pageNum, pdfContainer);
    }
}
function renderPage(num, pdfContainer) {
    debugger;
    pdfDoc.getPage(num).then(function (page) {
        let viewport = page.getViewport({ scale: scale });

        // Create the main canvas for PDF content
        const mainCanvas = document.createElement('canvas');
        mainCanvas.className = 'pdf-page';
        mainCanvas.dataset.page = num;
        mainCanvas.width = viewport.width;
        mainCanvas.height = viewport.height;

        // Create the highlight canvas
        const highlightCanvas = document.createElement('canvas');
        highlightCanvas.className = 'highlight-canvas';
        highlightCanvas.dataset.page = num;
        highlightCanvas.width = viewport.width;
        highlightCanvas.height = viewport.height;


        pdfContainer.appendChild(mainCanvas);
        pdfContainer.appendChild(highlightCanvas);

        // Render the PDF content on the main canvas
        let renderContext = {
            canvasContext: mainCanvas.getContext('2d'),
            viewport: viewport
        };
        page.render(renderContext);
    });

}
function createPDFViewer(pdfContainer, fileName) {
    const pdfViewerWrapper = document.querySelector('#platform_id_dsdnHnrF');
    // Create PDF toolbar
    const pdfToolbar = document.createElement('div');
    pdfToolbar.id = 'pdf-toolbar';

    const documentInfo = document.createElement('div');
    documentInfo.id = 'document-info';
    const documentName = document.createElement('span');
    documentName.id = 'document-name';
    documentName.innerText = fileName;
    documentInfo.appendChild(documentName);
    const pageControls = document.createElement('div');
    pageControls.id = 'page-controls';

    const prevPageBtn = document.createElement('button');
    prevPageBtn.id = 'prev-page';
    prevPageBtn.innerText = '<';
    pageControls.appendChild(prevPageBtn);

    const pageInputControl = document.createElement('input');
    pageInputControl.type = 'number';
    pageInputControl.id = 'page-input';
    pageInputControl.value = '1';
    pageInputControl.min = '1';
    pageControls.appendChild(pageInputControl);

    const pageSpan = document.createElement('span');
    pageSpan.innerHTML = '/ <span id="total-pages">10</span>';
    pageControls.appendChild(pageSpan);

    const nextPageBtn = document.createElement('button');
    nextPageBtn.id = 'next-page';
    nextPageBtn.innerText = '>';
    pageControls.appendChild(nextPageBtn);
    const zoomControls = document.createElement('div');
    zoomControls.className = 'zoom-controls';

    const zoomOutBtn = document.createElement('button');
    zoomOutBtn.id = 'zoom-out';
    zoomOutBtn.innerText = '-';
    zoomControls.appendChild(zoomOutBtn);

    const zoomInputContainer = document.createElement('div'); // Create a container for input and %
    //   zoomInputContainer.style.display = 'inline-flex'; // To keep them in a line

    const zoomInputControl = document.createElement('input');
    zoomInputControl.type = 'text';
    zoomInputControl.id = 'zoom-input';
    zoomInputControl.min = '50';
    zoomInputControl.max = '200';
    zoomInputControl.value = '100';


    zoomInputContainer.appendChild(zoomInputControl);
    zoomControls.appendChild(zoomInputContainer);

    const zoomInBtn = document.createElement('button');
    zoomInBtn.id = 'zoom-in';
    zoomInBtn.innerText = '+';
    zoomControls.appendChild(zoomInBtn);

    const extraControls = document.createElement('div');
    extraControls.id = 'extra-controls';


    const downloadBtn = document.createElement('button');
    downloadBtn.id = 'download-pdf';
    downloadBtn.innerHTML = '<i class="fa-solid fa fa-download"></i>';
    extraControls.appendChild(downloadBtn);

    const newWindowPopUpBtn = document.createElement('button');
    newWindowPopUpBtn.id = 'newWindow-pdf';
    newWindowPopUpBtn.innerHTML = '<i class="fa-solid fa fa-external-link"></i>';
    extraControls.appendChild(newWindowPopUpBtn);

    // Append all controls to the toolbar
    pdfToolbar.appendChild(documentInfo);
    pdfToolbar.appendChild(pageControls);
    pdfToolbar.appendChild(zoomControls);
    pdfToolbar.appendChild(extraControls);

    // Create PDF container


    // Append toolbar and container to the wrapper
    //pdfViewerWrapper.appendChild(documentInfo);
    pdfViewerWrapper.appendChild(pdfToolbar);
    pdfViewerWrapper.appendChild(pdfContainer);


    prevPageButton = document.getElementById('prev-page');
    nextPageButton = document.getElementById('next-page');
    pageInput = document.getElementById('page-input');
    totalPagesDisplay = document.getElementById('total-pages');
    zoomOutButton = document.getElementById('zoom-out');
    zoomInButton = document.getElementById('zoom-in');
    zoomInput = document.getElementById('zoom-input');
    downloadButton = document.getElementById('download-pdf');

    prevPageButton.addEventListener('click', () => goToPage(currentPage - 1));
    nextPageButton.addEventListener('click', () => goToPage(currentPage + 1));
    zoomOutButton.addEventListener('click', () => zoomPDF(-0.1));
    zoomInButton.addEventListener('click', () => zoomPDF(0.1));
    zoomOutButton.addEventListener('click', () => zoomPDF(-0.1));
    zoomInButton.addEventListener('click', () => zoomPDF(0.1));
    zoomInput.addEventListener('change', handleZoomInput);
    downloadButton.addEventListener('click', downloadPDF);
}
/* Function called from CreatePDFViewer*/
function zoomPDF(amount) {
    scale += amount;
    scale = Math.max(0.5, Math.min(scale, 2.0)); // Keep zoom between 50% and 200%
    zoomInput.value = Math.round(scale * 100);
    zoomInOut();
    reRenderPDF();  // Re-render the PDF after zoom adjustment
}
/* Function called from CreatePDFViewer*/
function handleZoomInput() {
    const zoomValue = parseInt(zoomInput.value, 10);
    // Check if the value is less than 50 or greater than 200
    if (zoomValue < 50) {
        zoomInput.value = 50; // Set to minimum value
        scale = 0.5; // Update the scale to match the new zoom
    } else if (zoomValue > 200) {
        zoomInput.value = 200; // Set to maximum value
        scale = 2.0; // Update the scale to match the new zoom
    } else if (isNaN(zoomValue)) {
        zoomInput.value = 100;
        scale = 1.0;
    }
    else {
        scale = zoomValue / 100; // Set scale based on the input value
    }
    zoomInOut();
    reRenderPDF();
}
/* Function called from CreatePDFViewer*/
function downloadPDF() {
    debugger;
    const byteCharacters = atob(window.pdfBase64);
    const byteNumbers = new Array(byteCharacters.length);
    for (let i = 0; i < byteCharacters.length; i++) {
        byteNumbers[i] = byteCharacters.charCodeAt(i);
    }
    const byteArray = new Uint8Array(byteNumbers);
    const blob = new Blob([byteArray], { type: 'application/pdf' });

    // Create a link element
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = window.fileName;

    // Append the link to the body
    document.body.appendChild(link);

    // Programmatically click the link to trigger the download
    link.click();

    // Clean up and remove the link
    document.body.removeChild(link);
}
/* Function called from HandleZoomInput*/
function zoomInOut() {
    // Apply the zoom by scaling each canvas element
    const canvases = document.querySelectorAll('#pdf-container canvas');

    canvases.forEach(canvas => {
        canvas.style.transform = `scale(${scale})`;      // Apply scale to canvas
        canvas.style.transformOrigin = '0 0';

        if (scale >= 1) {
            canvas.style.marginBottom = `${(0.05 * (scale * scale * 10000)) - (3 * scale * 100) - 175}px`; // Scale from top-left corner
        } else {
            canvas.style.marginBottom = `${(8.9 * scale * 100) - 887}px`; // Scale from top-left corner
        }
    });
}
/* Function called from HandleZoomInput*/
function reRenderPDF() {
    const canvases = document.querySelectorAll('#pdf-container canvas');
    canvases.forEach((canvas, index) => {
        const pageNum = index + 1; // Page numbers are 1-based
        pdfDoc.getPage(pageNum).then(page => {
            const ctx = canvas.getContext('2d');
            const viewport = page.getViewport({ scale: scale });
            canvas.width = viewport.width; // Update canvas width
            canvas.height = viewport.height; // Update canvas height
            page.render({ canvasContext: ctx, viewport: viewport });
        });
    });
}
/*Function for Highligting (Event Listener)*/
function handleMouseOver(event) {

    const pageNumber = event.target.dataset.page;
    const coordsInput = event.target.dataset.coords;
    const coords = parseCoordinates(coordsInput); // This will give you an array of 8 coordinates

    if (coords && pageNumber) {
        const pageNum = parseInt(pageNumber, 10);
        if (pageNum > 0 && pageNum <= pdfDoc.numPages) {
            pdfDoc.getPage(pageNum).then(page => {
                // Correct query selector with backticks for template literal
                const canvas = document.querySelector(`canvas[data-page="${pageNum}"]`);
                const ctx = canvas.getContext('2d');
                const viewport = page.getViewport({ scale: scale }); // Ensure scale is defined

                // Draw highlight with normalized coordinates
                drawHighlight(viewport, ctx, coords);
                highlightScrollToPage(pageNum, coords[0], coords[1]);
            });
        }
    }
}
/*Function for Highligting (Event Listener)*/
function handleMouseOut(event) {
    const pageNumber = event.target.dataset.page;
    if (pageNumber) {
        const pageNum = parseInt(pageNumber, 10);
        if (pageNum > 0 && pageNum <= pdfDoc.numPages) {
            pdfDoc.getPage(pageNum).then(page => {
                const canvas = document.querySelector(`canvas[data-page="${pageNum}"]`);
                const ctx = canvas.getContext('2d');

                // Get current scroll position and adjust the rendering accordingly
                const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
                const scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;

                // Clear the entire canvas
                ctx.clearRect(0, 0, canvas.width, canvas.height);

                // Get the viewport with the current zoom level
                const viewport = page.getViewport({ scale: scale });

                // Adjust canvas size based on zoom level (scale) and viewport dimensions
                canvas.width = viewport.width;
                canvas.height = viewport.height;

                // Re-render the page with the adjusted viewport, respecting the scroll position
                page.render({
                    canvasContext: ctx,
                    viewport: viewport,
                    transform: [1, 0, 0, 1, -scrollLeft, -scrollTop]
                });
            });
        }
    }
}
/*Called from handleMouseOer*/
function parseCoordinates(coordsInput) {
    // Parse the input string into an array of numbers
    const coords = coordsInput.split(',').map(Number);

    // Ensure there are exactly 8 values
    if (coords.length === 8) {
        return coords; // Return as an array of 8 coordinates
    }
    return null; // In case the coordinates are malformed
}
/*Called from handleMouseOer*/
function drawHighlight(viewport, ctx, coords) {
    // coords will be an array of 8 values: [x1, y1, x2, y2, x3, y3, x4, y4]
    const points = [
        { x: coords[0], y: coords[1] },
        { x: coords[2], y: coords[3] },
        { x: coords[4], y: coords[5] },
        { x: coords[6], y: coords[7] }
    ];

    // Convert the points to the correct scale/viewport space
    points.forEach(point => {
        point.x = point.x * 72;
        point.y = point.y * 72;
    });

    // Draw the polygon on the canvas
    ctx.beginPath();
    ctx.moveTo(points[0].x, points[0].y);

    // Draw lines to the other points
    points.forEach((point, index) => {
        if (index > 0) {
            ctx.lineTo(point.x, point.y);
        }
    });

    // Close the path (complete the polygon)
    ctx.closePath();

    // Apply styling for the highlight (e.g., semi-transparent fill)
    ctx.fillStyle = 'rgba(255, 0, 0, 0.3)'; // Red with transparency
    ctx.fill();
    ctx.lineWidth = 2;
    ctx.strokeStyle = 'red';
    ctx.stroke();
}
/*Called from handleMouseOer*/
function highlightScrollToPage(pageNumber, targetX = 0, targetY = 0) {
    const pageCanvas = document.querySelector(`canvas[data-page="${pageNumber}"]`);
    const container = document.querySelector('#pdf-container');

    if (pageCanvas) {
        // Extract scale from canvas transform property
        const transform = pageCanvas.style.transform;
        const match = transform.match(/scale\(([^)]+)\)/);
        const scale = match ? parseFloat(match[1]) : 1; // Default to 1 if not found

        // Adjust target coordinates according to the zoom (scale)
        const scrollToX = pageCanvas.offsetLeft + (targetX * scale);
        const scrollToY = pageCanvas.offsetTop + (targetY * scale);

        // Scroll the container to the calculated position, with smooth scroll
        container.scrollTo({
            top: scrollToY,
            left: scrollToX,
            behavior: 'smooth'
        });
    }
}
function handlePageInput() {
    let enteredPage = parseInt(pageInput.value, 10);

    if (enteredPage < 1 || isNaN(enteredPage)) {
        pageInput.value = 1;
        enteredPage = 1;
    } else if (enteredPage > pdfDoc.numPages) {
        pageInput.value = pdfDoc.numPages;
        enteredPage = pdfDoc.numPages;
    }

    goToPage(enteredPage);
}
function goToPage(pageNumber) {
    if (pageNumber < 1 || pageNumber > pdfDoc.numPages) return;
    scrollToPage(pageNumber);
}
function scrollToPage(pageNumber) {
    const pageCanvas = document.querySelector(`canvas[data-page="${pageNumber}"]`);
    if (pageCanvas) {
        currentPage = pageNumber;
        pageInput.value = currentPage;
        //const canvasContainer = document.getElementById('canvasContainer'); // Assuming a container ID
        canvasContainer.scrollTop = pageCanvas.offsetTop;
    }
}



let ocrExtractedJSON = {
    "status": "succeeded",
    "createdDateTime": "2025-02-07T06:16:22Z",
    "lastUpdatedDateTime": "2025-02-07T06:16:23Z",
    "analyzeResult": {
        "apiVersion": "2024-11-30",
        "modelId": "prebuilt-layout",
        "stringIndexType": "utf16CodeUnit",
        "content": "O\nVisible Emissions Evaluator Field Certification\nrecipient.name\nThis certificate ottests to the authenticity of the luxury jewelry piece described below and confirms that it is an original design crafted by the specified jeweler.\nEmployee ID: VE234567\nCertification Date: 2022-09-10\nEmployee Name: Jessica Taylor\nExpiration Date: 2024-09-10\nGasparout\nSAMANTHA WRIGHT Authentication Specialist\n[certificate.issued_on] certificato Luid :unselected: :unselected: :unselected: :selected:",
        "pages": [
            {
                "pageNumber": 1,
                "angle": -0.02449999935925007,
                "width": 8.2639,
                "height": 11.6944,
                "unit": "inch",
                "words": [
                    {
                        "content": "O",
                        "polygon": [
                            3.762,
                            0.9853,
                            4.4946,
                            1.0127,
                            4.4946,
                            1.6788,
                            3.7634,
                            1.6788
                        ],
                        "confidence": 0.275,
                        "span": {
                            "offset": 0,
                            "length": 1
                        }
                    },
                    {
                        "content": "Visible",
                        "polygon": [
                            0.619,
                            2.1374,
                            2.3517,
                            2.1414,
                            2.3521,
                            2.6857,
                            0.6196,
                            2.6776
                        ],
                        "confidence": 0.994,
                        "span": {
                            "offset": 2,
                            "length": 7
                        }
                    },
                    {
                        "content": "Emissions",
                        "polygon": [
                            2.5412,
                            2.1427,
                            4.996,
                            2.1454,
                            4.9971,
                            2.6973,
                            2.5418,
                            2.6902
                        ],
                        "confidence": 0.993,
                        "span": {
                            "offset": 10,
                            "length": 9
                        }
                    },
                    {
                        "content": "Evaluator",
                        "polygon": [
                            5.1945,
                            2.1454,
                            7.6357,
                            2.147,
                            7.6357,
                            2.7009,
                            5.1956,
                            2.6993
                        ],
                        "confidence": 0.993,
                        "span": {
                            "offset": 20,
                            "length": 9
                        }
                    },
                    {
                        "content": "Field",
                        "polygon": [
                            1.7494,
                            3.1167,
                            3.0503,
                            3.1107,
                            3.0523,
                            3.67,
                            1.7505,
                            3.6598
                        ],
                        "confidence": 0.997,
                        "span": {
                            "offset": 30,
                            "length": 5
                        }
                    },
                    {
                        "content": "Certification",
                        "polygon": [
                            3.2152,
                            3.1108,
                            6.482,
                            3.1168,
                            6.482,
                            3.6664,
                            3.2166,
                            3.671
                        ],
                        "confidence": 0.991,
                        "span": {
                            "offset": 36,
                            "length": 13
                        }
                    },
                    {
                        "content": "recipient.name",
                        "polygon": [
                            2.3249,
                            4.0092,
                            5.9566,
                            4.0053,
                            5.9566,
                            4.515,
                            2.3256,
                            4.5494
                        ],
                        "confidence": 0.988,
                        "span": {
                            "offset": 50,
                            "length": 14
                        }
                    },
                    {
                        "content": "This",
                        "polygon": [
                            1.1085,
                            5.0901,
                            1.5127,
                            5.0931,
                            1.5124,
                            5.3263,
                            1.1083,
                            5.3248
                        ],
                        "confidence": 0.989,
                        "span": {
                            "offset": 65,
                            "length": 4
                        }
                    },
                    {
                        "content": "certificate",
                        "polygon": [
                            1.5749,
                            5.0933,
                            2.535,
                            5.0923,
                            2.5347,
                            5.3289,
                            1.5746,
                            5.3265
                        ],
                        "confidence": 0.484,
                        "span": {
                            "offset": 70,
                            "length": 11
                        }
                    },
                    {
                        "content": "ottests",
                        "polygon": [
                            2.5972,
                            5.0925,
                            3.2541,
                            5.0947,
                            3.2539,
                            5.3306,
                            2.5969,
                            5.329
                        ],
                        "confidence": 0.975,
                        "span": {
                            "offset": 82,
                            "length": 7
                        }
                    },
                    {
                        "content": "to",
                        "polygon": [
                            3.3085,
                            5.0947,
                            3.495,
                            5.0944,
                            3.4949,
                            5.331,
                            3.3083,
                            5.3307
                        ],
                        "confidence": 0.997,
                        "span": {
                            "offset": 90,
                            "length": 2
                        }
                    },
                    {
                        "content": "the",
                        "polygon": [
                            3.5533,
                            5.0943,
                            3.8643,
                            5.0944,
                            3.8641,
                            5.3322,
                            3.5532,
                            5.3311
                        ],
                        "confidence": 0.992,
                        "span": {
                            "offset": 93,
                            "length": 3
                        }
                    },
                    {
                        "content": "authenticity",
                        "polygon": [
                            3.9265,
                            5.0945,
                            5.0576,
                            5.0964,
                            5.0569,
                            5.3352,
                            3.9263,
                            5.3324
                        ],
                        "confidence": 0.594,
                        "span": {
                            "offset": 97,
                            "length": 12
                        }
                    },
                    {
                        "content": "of",
                        "polygon": [
                            5.1042,
                            5.0962,
                            5.2908,
                            5.0954,
                            5.2902,
                            5.3349,
                            5.1036,
                            5.3352
                        ],
                        "confidence": 0.989,
                        "span": {
                            "offset": 110,
                            "length": 2
                        }
                    },
                    {
                        "content": "the",
                        "polygon": [
                            5.3374,
                            5.0952,
                            5.6484,
                            5.0976,
                            5.6481,
                            5.3366,
                            5.3368,
                            5.3349
                        ],
                        "confidence": 0.995,
                        "span": {
                            "offset": 113,
                            "length": 3
                        }
                    },
                    {
                        "content": "luxury",
                        "polygon": [
                            5.695,
                            5.098,
                            6.278,
                            5.0999,
                            6.2777,
                            5.3383,
                            5.6948,
                            5.3369
                        ],
                        "confidence": 0.991,
                        "span": {
                            "offset": 117,
                            "length": 6
                        }
                    },
                    {
                        "content": "jewelry",
                        "polygon": [
                            6.3364,
                            5.1003,
                            7.0189,
                            5.102,
                            7.0189,
                            5.339,
                            6.3361,
                            5.3385
                        ],
                        "confidence": 0.963,
                        "span": {
                            "offset": 124,
                            "length": 7
                        }
                    },
                    {
                        "content": "piece",
                        "polygon": [
                            1.3417,
                            5.3906,
                            1.9011,
                            5.3937,
                            1.9014,
                            5.6131,
                            1.3421,
                            5.6131
                        ],
                        "confidence": 0.988,
                        "span": {
                            "offset": 132,
                            "length": 5
                        }
                    },
                    {
                        "content": "described",
                        "polygon": [
                            1.9637,
                            5.3933,
                            2.8839,
                            5.39,
                            2.8842,
                            5.6131,
                            1.964,
                            5.6131
                        ],
                        "confidence": 0.986,
                        "span": {
                            "offset": 138,
                            "length": 9
                        }
                    },
                    {
                        "content": "below",
                        "polygon": [
                            2.9465,
                            5.3898,
                            3.5575,
                            5.3877,
                            3.5578,
                            5.6131,
                            2.9468,
                            5.6131
                        ],
                        "confidence": 0.963,
                        "span": {
                            "offset": 148,
                            "length": 5
                        }
                    },
                    {
                        "content": "and",
                        "polygon": [
                            3.6164,
                            5.3874,
                            3.9845,
                            5.3877,
                            3.9848,
                            5.6131,
                            3.6167,
                            5.6131
                        ],
                        "confidence": 0.912,
                        "span": {
                            "offset": 154,
                            "length": 3
                        }
                    },
                    {
                        "content": "confirms",
                        "polygon": [
                            4.0471,
                            5.3878,
                            4.8863,
                            5.3874,
                            4.8867,
                            5.6131,
                            4.0473,
                            5.6131
                        ],
                        "confidence": 0.847,
                        "span": {
                            "offset": 158,
                            "length": 8
                        }
                    },
                    {
                        "content": "that",
                        "polygon": [
                            4.9305,
                            5.3876,
                            5.3022,
                            5.389,
                            5.3027,
                            5.6131,
                            4.9309,
                            5.6131
                        ],
                        "confidence": 0.955,
                        "span": {
                            "offset": 167,
                            "length": 4
                        }
                    },
                    {
                        "content": "it",
                        "polygon": [
                            5.3464,
                            5.3888,
                            5.501,
                            5.3884,
                            5.5016,
                            5.6131,
                            5.3469,
                            5.6131
                        ],
                        "confidence": 0.989,
                        "span": {
                            "offset": 172,
                            "length": 2
                        }
                    },
                    {
                        "content": "is",
                        "polygon": [
                            5.5451,
                            5.3882,
                            5.6961,
                            5.388,
                            5.6968,
                            5.6131,
                            5.5458,
                            5.6131
                        ],
                        "confidence": 0.995,
                        "span": {
                            "offset": 175,
                            "length": 2
                        }
                    },
                    {
                        "content": "an",
                        "polygon": [
                            5.7439,
                            5.388,
                            5.9905,
                            5.3879,
                            5.9913,
                            5.6131,
                            5.7447,
                            5.6131
                        ],
                        "confidence": 0.657,
                        "span": {
                            "offset": 178,
                            "length": 2
                        }
                    },
                    {
                        "content": "original",
                        "polygon": [
                            6.0494,
                            5.3883,
                            6.7733,
                            5.3917,
                            6.7733,
                            5.6131,
                            6.0502,
                            5.6131
                        ],
                        "confidence": 0.962,
                        "span": {
                            "offset": 181,
                            "length": 8
                        }
                    },
                    {
                        "content": "design",
                        "polygon": [
                            2.1656,
                            5.692,
                            2.8445,
                            5.6935,
                            2.845,
                            5.929,
                            2.1659,
                            5.9259
                        ],
                        "confidence": 0.991,
                        "span": {
                            "offset": 190,
                            "length": 6
                        }
                    },
                    {
                        "content": "crafted",
                        "polygon": [
                            2.9017,
                            5.6933,
                            3.5653,
                            5.6943,
                            3.5659,
                            5.932,
                            2.9022,
                            5.9292
                        ],
                        "confidence": 0.816,
                        "span": {
                            "offset": 197,
                            "length": 7
                        }
                    },
                    {
                        "content": "by",
                        "polygon": [
                            3.6149,
                            5.6939,
                            3.859,
                            5.692,
                            3.8596,
                            5.9313,
                            3.6155,
                            5.9319
                        ],
                        "confidence": 0.995,
                        "span": {
                            "offset": 205,
                            "length": 2
                        }
                    },
                    {
                        "content": "the",
                        "polygon": [
                            3.9047,
                            5.6918,
                            4.2518,
                            5.6936,
                            4.2524,
                            5.9297,
                            3.9054,
                            5.9311
                        ],
                        "confidence": 0.995,
                        "span": {
                            "offset": 208,
                            "length": 3
                        }
                    },
                    {
                        "content": "specified",
                        "polygon": [
                            4.3166,
                            5.6945,
                            5.1747,
                            5.6977,
                            5.1756,
                            5.9241,
                            4.3173,
                            5.9295
                        ],
                        "confidence": 0.868,
                        "span": {
                            "offset": 212,
                            "length": 9
                        }
                    },
                    {
                        "content": "jeweler.",
                        "polygon": [
                            5.2319,
                            5.6978,
                            5.9623,
                            5.6992,
                            5.9623,
                            5.9217,
                            5.2328,
                            5.9238
                        ],
                        "confidence": 0.942,
                        "span": {
                            "offset": 222,
                            "length": 8
                        }
                    },
                    {
                        "content": "Employee",
                        "polygon": [
                            0.7327,
                            6.4214,
                            1.6901,
                            6.4162,
                            1.6901,
                            6.6829,
                            0.7325,
                            6.6839
                        ],
                        "confidence": 0.947,
                        "span": {
                            "offset": 231,
                            "length": 8
                        }
                    },
                    {
                        "content": "ID:",
                        "polygon": [
                            1.7414,
                            6.416,
                            1.9979,
                            6.4163,
                            1.998,
                            6.6768,
                            1.7414,
                            6.6822
                        ],
                        "confidence": 0.989,
                        "span": {
                            "offset": 240,
                            "length": 3
                        }
                    },
                    {
                        "content": "VE234567",
                        "polygon": [
                            2.0492,
                            6.4164,
                            3.0269,
                            6.4142,
                            3.0269,
                            6.664,
                            2.0493,
                            6.6756
                        ],
                        "confidence": 0.992,
                        "span": {
                            "offset": 244,
                            "length": 8
                        }
                    },
                    {
                        "content": "Certification",
                        "polygon": [
                            4.2321,
                            6.4492,
                            5.4817,
                            6.446,
                            5.4825,
                            6.6672,
                            4.233,
                            6.6666
                        ],
                        "confidence": 0.963,
                        "span": {
                            "offset": 253,
                            "length": 13
                        }
                    },
                    {
                        "content": "Date:",
                        "polygon": [
                            5.5429,
                            6.4461,
                            6.0615,
                            6.4453,
                            6.0625,
                            6.6669,
                            5.5437,
                            6.6672
                        ],
                        "confidence": 0.992,
                        "span": {
                            "offset": 267,
                            "length": 5
                        }
                    },
                    {
                        "content": "2022-09-10",
                        "polygon": [
                            6.1047,
                            6.4453,
                            7.2359,
                            6.4468,
                            7.2359,
                            6.6632,
                            6.1058,
                            6.6665
                        ],
                        "confidence": 0.992,
                        "span": {
                            "offset": 273,
                            "length": 10
                        }
                    },
                    {
                        "content": "Employee",
                        "polygon": [
                            0.7224,
                            7.3323,
                            1.6895,
                            7.3287,
                            1.6897,
                            7.5794,
                            0.7224,
                            7.5775
                        ],
                        "confidence": 0.988,
                        "span": {
                            "offset": 284,
                            "length": 8
                        }
                    },
                    {
                        "content": "Name:",
                        "polygon": [
                            1.7379,
                            7.3298,
                            2.4189,
                            7.3324,
                            2.4191,
                            7.577,
                            1.7381,
                            7.5787
                        ],
                        "confidence": 0.941,
                        "span": {
                            "offset": 293,
                            "length": 5
                        }
                    },
                    {
                        "content": "Jessica",
                        "polygon": [
                            2.4713,
                            7.3323,
                            3.2008,
                            7.3312,
                            3.201,
                            7.5742,
                            2.4715,
                            7.5768
                        ],
                        "confidence": 0.986,
                        "span": {
                            "offset": 299,
                            "length": 7
                        }
                    },
                    {
                        "content": "Taylor",
                        "polygon": [
                            3.2532,
                            7.331,
                            3.9121,
                            7.3332,
                            3.9121,
                            7.5696,
                            3.2535,
                            7.5741
                        ],
                        "confidence": 0.974,
                        "span": {
                            "offset": 307,
                            "length": 6
                        }
                    },
                    {
                        "content": "Expiration",
                        "polygon": [
                            4.2886,
                            7.3477,
                            5.3178,
                            7.3469,
                            5.3186,
                            7.5781,
                            4.2896,
                            7.5887
                        ],
                        "confidence": 0.976,
                        "span": {
                            "offset": 314,
                            "length": 10
                        }
                    },
                    {
                        "content": "Date:",
                        "polygon": [
                            5.3779,
                            7.3473,
                            5.8851,
                            7.3469,
                            5.8859,
                            7.574,
                            5.3787,
                            7.5776
                        ],
                        "confidence": 0.992,
                        "span": {
                            "offset": 325,
                            "length": 5
                        }
                    },
                    {
                        "content": "2024-09-10",
                        "polygon": [
                            5.9302,
                            7.3466,
                            7.0874,
                            7.3428,
                            7.0874,
                            7.5639,
                            5.931,
                            7.5735
                        ],
                        "confidence": 0.993,
                        "span": {
                            "offset": 331,
                            "length": 10
                        }
                    },
                    {
                        "content": "Gasparout",
                        "polygon": [
                            0.9897,
                            9.1867,
                            4.0491,
                            9.1375,
                            4.0491,
                            9.8246,
                            0.9921,
                            9.8786
                        ],
                        "confidence": 0.461,
                        "span": {
                            "offset": 342,
                            "length": 9
                        }
                    },
                    {
                        "content": "SAMANTHA",
                        "polygon": [
                            1.1731,
                            10.0345,
                            2.242,
                            10.0351,
                            2.2407,
                            10.2612,
                            1.1719,
                            10.2604
                        ],
                        "confidence": 0.989,
                        "span": {
                            "offset": 352,
                            "length": 8
                        }
                    },
                    {
                        "content": "WRIGHT",
                        "polygon": [
                            2.2904,
                            10.0347,
                            3.0668,
                            10.0332,
                            3.0668,
                            10.2601,
                            2.2892,
                            10.2612
                        ],
                        "confidence": 0.974,
                        "span": {
                            "offset": 361,
                            "length": 6
                        }
                    },
                    {
                        "content": "Authentication",
                        "polygon": [
                            0.8954,
                            10.3274,
                            2.3154,
                            10.3282,
                            2.3147,
                            10.5685,
                            0.8948,
                            10.5564
                        ],
                        "confidence": 0.903,
                        "span": {
                            "offset": 368,
                            "length": 14
                        }
                    },
                    {
                        "content": "Specialist",
                        "polygon": [
                            2.3975,
                            10.328,
                            3.3467,
                            10.3295,
                            3.3467,
                            10.5661,
                            2.3971,
                            10.569
                        ],
                        "confidence": 0.881,
                        "span": {
                            "offset": 383,
                            "length": 10
                        }
                    },
                    {
                        "content": "[certificate.issued_on]",
                        "polygon": [
                            4.9401,
                            10.0259,
                            7.1445,
                            10.0126,
                            7.1445,
                            10.275,
                            4.9405,
                            10.284
                        ],
                        "confidence": 0.747,
                        "span": {
                            "offset": 394,
                            "length": 23
                        }
                    },
                    {
                        "content": "certificato",
                        "polygon": [
                            5.5043,
                            10.3556,
                            6.1964,
                            10.3571,
                            6.197,
                            10.5264,
                            5.5041,
                            10.5296
                        ],
                        "confidence": 0.612,
                        "span": {
                            "offset": 418,
                            "length": 11
                        }
                    },
                    {
                        "content": "Luid",
                        "polygon": [
                            6.2299,
                            10.357,
                            6.5848,
                            10.3534,
                            6.5848,
                            10.5283,
                            6.2305,
                            10.5262
                        ],
                        "confidence": 0.11,
                        "span": {
                            "offset": 430,
                            "length": 4
                        }
                    }
                ],
                "selectionMarks": [
                    {
                        "state": "unselected",
                        "polygon": [
                            5.7542,
                            9.2549,
                            5.9133,
                            9.2549,
                            5.9133,
                            9.4185,
                            5.7542,
                            9.4185
                        ],
                        "confidence": 0.1,
                        "span": {
                            "offset": 435,
                            "length": 12
                        }
                    },
                    {
                        "state": "unselected",
                        "polygon": [
                            6.1576,
                            9.251,
                            6.319,
                            9.251,
                            6.319,
                            9.4196,
                            6.1576,
                            9.4196
                        ],
                        "confidence": 0.1,
                        "span": {
                            "offset": 448,
                            "length": 12
                        }
                    },
                    {
                        "state": "unselected",
                        "polygon": [
                            5.747,
                            9.6729,
                            5.9118,
                            9.6729,
                            5.9118,
                            9.8456,
                            5.747,
                            9.8456
                        ],
                        "confidence": 0.1,
                        "span": {
                            "offset": 461,
                            "length": 12
                        }
                    },
                    {
                        "state": "selected",
                        "polygon": [
                            5.7542,
                            9.5114,
                            5.9069,
                            9.5114,
                            5.9069,
                            9.6434,
                            5.7542,
                            9.6434
                        ],
                        "confidence": 0.1,
                        "span": {
                            "offset": 474,
                            "length": 10
                        }
                    }
                ],
                "lines": [
                    {
                        "content": "O",
                        "polygon": [
                            3.762,
                            0.9853,
                            4.4891,
                            0.9838,
                            4.4904,
                            1.6772,
                            3.7634,
                            1.6786
                        ],
                        "spans": [
                            {
                                "offset": 0,
                                "length": 1
                            }
                        ]
                    },
                    {
                        "content": "Visible Emissions Evaluator",
                        "polygon": [
                            0.619,
                            2.1299,
                            7.6336,
                            2.1466,
                            7.6322,
                            2.6991,
                            0.6176,
                            2.6817
                        ],
                        "spans": [
                            {
                                "offset": 2,
                                "length": 27
                            }
                        ]
                    },
                    {
                        "content": "Field Certification",
                        "polygon": [
                            1.7494,
                            3.1083,
                            6.4806,
                            3.1088,
                            6.4806,
                            3.6706,
                            1.7493,
                            3.6701
                        ],
                        "spans": [
                            {
                                "offset": 30,
                                "length": 19
                            }
                        ]
                    },
                    {
                        "content": "recipient.name",
                        "polygon": [
                            2.3244,
                            3.9981,
                            5.9547,
                            3.9914,
                            5.9564,
                            4.5386,
                            2.3257,
                            4.5498
                        ],
                        "spans": [
                            {
                                "offset": 50,
                                "length": 14
                            }
                        ]
                    },
                    {
                        "content": "This certificate ottests to the authenticity of the luxury jewelry",
                        "polygon": [
                            1.1085,
                            5.0878,
                            7.0146,
                            5.0998,
                            7.014,
                            5.3383,
                            1.1079,
                            5.3221
                        ],
                        "spans": [
                            {
                                "offset": 65,
                                "length": 66
                            }
                        ]
                    },
                    {
                        "content": "piece described below and confirms that it is an original",
                        "polygon": [
                            1.3417,
                            5.3887,
                            6.7683,
                            5.3853,
                            6.7684,
                            5.6104,
                            1.3418,
                            5.6131
                        ],
                        "spans": [
                            {
                                "offset": 132,
                                "length": 57
                            }
                        ]
                    },
                    {
                        "content": "design crafted by the specified jeweler.",
                        "polygon": [
                            2.1656,
                            5.6919,
                            5.9599,
                            5.6903,
                            5.96,
                            5.927,
                            2.1657,
                            5.9286
                        ],
                        "spans": [
                            {
                                "offset": 190,
                                "length": 40
                            }
                        ]
                    },
                    {
                        "content": "Employee ID: VE234567",
                        "polygon": [
                            0.731,
                            6.4203,
                            3.0248,
                            6.4125,
                            3.0267,
                            6.6687,
                            0.7325,
                            6.6855
                        ],
                        "spans": [
                            {
                                "offset": 231,
                                "length": 21
                            }
                        ]
                    },
                    {
                        "content": "Certification Date: 2022-09-10",
                        "polygon": [
                            4.2321,
                            6.4444,
                            7.2333,
                            6.4451,
                            7.2333,
                            6.6647,
                            4.232,
                            6.664
                        ],
                        "spans": [
                            {
                                "offset": 253,
                                "length": 30
                            }
                        ]
                    },
                    {
                        "content": "Employee Name: Jessica Taylor",
                        "polygon": [
                            0.7224,
                            7.3267,
                            3.9086,
                            7.3265,
                            3.9086,
                            7.5779,
                            0.7224,
                            7.5781
                        ],
                        "spans": [
                            {
                                "offset": 284,
                                "length": 29
                            }
                        ]
                    },
                    {
                        "content": "Expiration Date: 2024-09-10",
                        "polygon": [
                            4.2886,
                            7.3466,
                            7.0821,
                            7.3376,
                            7.0831,
                            7.5764,
                            4.2896,
                            7.588
                        ],
                        "spans": [
                            {
                                "offset": 314,
                                "length": 27
                            }
                        ]
                    },
                    {
                        "content": "Gasparout",
                        "polygon": [
                            0.988,
                            9.187,
                            4.0436,
                            9.1363,
                            4.0491,
                            9.8211,
                            0.9923,
                            9.8786
                        ],
                        "spans": [
                            {
                                "offset": 342,
                                "length": 9
                            }
                        ]
                    },
                    {
                        "content": "SAMANTHA WRIGHT",
                        "polygon": [
                            1.1719,
                            10.0335,
                            3.0649,
                            10.0328,
                            3.065,
                            10.2586,
                            1.1719,
                            10.2593
                        ],
                        "spans": [
                            {
                                "offset": 352,
                                "length": 15
                            }
                        ]
                    },
                    {
                        "content": "Authentication Specialist",
                        "polygon": [
                            0.8954,
                            10.3216,
                            3.3421,
                            10.3292,
                            3.3413,
                            10.5685,
                            0.8947,
                            10.561
                        ],
                        "spans": [
                            {
                                "offset": 368,
                                "length": 25
                            }
                        ]
                    },
                    {
                        "content": "[certificate.issued_on]",
                        "polygon": [
                            4.9401,
                            10.0222,
                            7.1401,
                            10.0126,
                            7.1412,
                            10.2706,
                            4.9405,
                            10.2802
                        ],
                        "spans": [
                            {
                                "offset": 394,
                                "length": 23
                            }
                        ]
                    },
                    {
                        "content": "certificato Luid",
                        "polygon": [
                            5.5035,
                            10.3556,
                            6.5808,
                            10.3526,
                            6.5813,
                            10.5252,
                            5.5041,
                            10.5288
                        ],
                        "spans": [
                            {
                                "offset": 418,
                                "length": 16
                            }
                        ]
                    }
                ],
                "spans": [
                    {
                        "offset": 0,
                        "length": 484
                    }
                ]
            }
        ],
        "tables": [],
        "paragraphs": [
            {
                "spans": [
                    {
                        "offset": 0,
                        "length": 1
                    }
                ],
                "boundingRegions": [
                    {
                        "pageNumber": 1,
                        "polygon": [
                            3.762,
                            0.9853,
                            4.4891,
                            0.9838,
                            4.4904,
                            1.6772,
                            3.7634,
                            1.6786
                        ]
                    }
                ],
                "content": "O"
            },
            {
                "spans": [
                    {
                        "offset": 2,
                        "length": 47
                    }
                ],
                "boundingRegions": [
                    {
                        "pageNumber": 1,
                        "polygon": [
                            0.619,
                            2.1299,
                            7.6336,
                            2.1466,
                            7.6299,
                            3.6841,
                            0.6153,
                            3.6675
                        ]
                    }
                ],
                "role": "title",
                "content": "Visible Emissions Evaluator Field Certification"
            },
            {
                "spans": [
                    {
                        "offset": 50,
                        "length": 14
                    }
                ],
                "boundingRegions": [
                    {
                        "pageNumber": 1,
                        "polygon": [
                            2.3244,
                            3.9981,
                            5.9552,
                            3.9899,
                            5.9564,
                            4.5416,
                            2.3257,
                            4.5498
                        ]
                    }
                ],
                "content": "recipient.name"
            },
            {
                "spans": [
                    {
                        "offset": 65,
                        "length": 165
                    }
                ],
                "boundingRegions": [
                    {
                        "pageNumber": 1,
                        "polygon": [
                            1.1084,
                            5.0878,
                            7.0146,
                            5.0998,
                            7.0129,
                            5.9385,
                            1.1067,
                            5.9265
                        ]
                    }
                ],
                "content": "This certificate ottests to the authenticity of the luxury jewelry piece described below and confirms that it is an original design crafted by the specified jeweler."
            },
            {
                "spans": [
                    {
                        "offset": 231,
                        "length": 21
                    }
                ],
                "boundingRegions": [
                    {
                        "pageNumber": 1,
                        "polygon": [
                            0.731,
                            6.4203,
                            3.0253,
                            6.4072,
                            3.0268,
                            6.6724,
                            0.7325,
                            6.6855
                        ]
                    }
                ],
                "content": "Employee ID: VE234567"
            },
            {
                "spans": [
                    {
                        "offset": 253,
                        "length": 30
                    }
                ],
                "boundingRegions": [
                    {
                        "pageNumber": 1,
                        "polygon": [
                            4.2321,
                            6.4444,
                            7.2333,
                            6.4451,
                            7.2333,
                            6.6647,
                            4.232,
                            6.664
                        ]
                    }
                ],
                "content": "Certification Date: 2022-09-10"
            },
            {
                "spans": [
                    {
                        "offset": 284,
                        "length": 29
                    }
                ],
                "boundingRegions": [
                    {
                        "pageNumber": 1,
                        "polygon": [
                            0.7224,
                            7.3267,
                            3.9086,
                            7.3265,
                            3.9086,
                            7.5779,
                            0.7224,
                            7.5781
                        ]
                    }
                ],
                "content": "Employee Name: Jessica Taylor"
            },
            {
                "spans": [
                    {
                        "offset": 314,
                        "length": 27
                    }
                ],
                "boundingRegions": [
                    {
                        "pageNumber": 1,
                        "polygon": [
                            4.2886,
                            7.3466,
                            7.0821,
                            7.335,
                            7.0831,
                            7.5764,
                            4.2896,
                            7.588
                        ]
                    }
                ],
                "content": "Expiration Date: 2024-09-10"
            },
            {
                "spans": [
                    {
                        "offset": 342,
                        "length": 9
                    }
                ],
                "boundingRegions": [
                    {
                        "pageNumber": 1,
                        "polygon": [
                            0.9808,
                            9.1871,
                            4.0436,
                            9.1363,
                            4.0551,
                            9.8278,
                            0.9923,
                            9.8786
                        ]
                    }
                ],
                "content": "Gasparout"
            },
            {
                "spans": [
                    {
                        "offset": 352,
                        "length": 41
                    }
                ],
                "boundingRegions": [
                    {
                        "pageNumber": 1,
                        "polygon": [
                            0.8964,
                            10.0261,
                            3.343,
                            10.0336,
                            3.3413,
                            10.5685,
                            0.8947,
                            10.561
                        ]
                    }
                ],
                "content": "SAMANTHA WRIGHT Authentication Specialist"
            },
            {
                "spans": [
                    {
                        "offset": 394,
                        "length": 40
                    }
                ],
                "boundingRegions": [
                    {
                        "pageNumber": 1,
                        "polygon": [
                            4.9394,
                            10.0222,
                            7.1401,
                            10.0126,
                            7.1423,
                            10.5228,
                            4.9416,
                            10.5324
                        ]
                    }
                ],
                "content": "[certificate.issued_on] certificato Luid"
            }
        ],
        "styles": [
            {
                "confidence": 1,
                "spans": [
                    {
                        "offset": 342,
                        "length": 9
                    }
                ],
                "isHandwritten": true
            }
        ],
        "contentFormat": "text",
        "sections": [
            {
                "spans": [
                    {
                        "offset": 0,
                        "length": 434
                    }
                ],
                "elements": [
                    "/sections/1",
                    "/sections/2"
                ]
            },
            {
                "spans": [
                    {
                        "offset": 0,
                        "length": 1
                    }
                ],
                "elements": [
                    "/figures/0"
                ]
            },
            {
                "spans": [
                    {
                        "offset": 2,
                        "length": 432
                    }
                ],
                "elements": [
                    "/paragraphs/1",
                    "/paragraphs/2",
                    "/paragraphs/3",
                    "/paragraphs/4",
                    "/paragraphs/5",
                    "/paragraphs/6",
                    "/paragraphs/7",
                    "/paragraphs/8",
                    "/paragraphs/9",
                    "/figures/1"
                ]
            }
        ],
        "figures": [
            {
                "id": "1.1",
                "boundingRegions": [
                    {
                        "pageNumber": 1,
                        "polygon": [
                            3.7335,
                            0.9959,
                            4.5139,
                            0.9958,
                            4.5139,
                            1.6907,
                            3.7336,
                            1.6908
                        ]
                    }
                ],
                "spans": [
                    {
                        "offset": 0,
                        "length": 1
                    }
                ],
                "elements": [
                    "/paragraphs/0"
                ]
            },
            {
                "id": "1.2",
                "boundingRegions": [
                    {
                        "pageNumber": 1,
                        "polygon": [
                            4.9047,
                            9.1795,
                            7.2656,
                            9.1789,
                            7.2651,
                            10.6071,
                            4.9042,
                            10.6076
                        ]
                    }
                ],
                "spans": [
                    {
                        "offset": 394,
                        "length": 40
                    }
                ],
                "elements": [
                    "/paragraphs/10"
                ]
            }
        ]
    }
};
let jsonData = {
    "$schema": "https://schema.cognitiveservices.azure.com/formrecognizer/2021-03-01/fields.json",
    "fields": []
};
let jsonStructure = {
    "$schema": "https://schema.cognitiveservices.azure.com/formrecognizer/2021-03-01/labels.json",
    "document": "Visible Emissions Evaluator Field Certification(2).pdf",
    "labels": []
};

let labelsArray = [];
let contentArray = [];
let boundingBoxArray = [];

function selectAndHighlight() {
    let pdfCanvas = document.querySelector('.pdf-page');
    let overlayCanvas = document.querySelector('.highlight-canvas');
    let ctxOverlay = overlayCanvas.getContext('2d');
    let pdfPage, pdfScale = 1.5;
    let isDrawing = false, startX, startY, endX, endY;

    // Array to store drawn rectangles
    let rectangles = [];
    let words = ocrExtractedJSON.analyzeResult.pages[0].words
    overlayCanvas.addEventListener('mousedown', (event) => {
        isDrawing = true;
        startX = event.offsetX;
        startY = event.offsetY;
        // Optionally, clear only the "current" drawing state here
    });

    overlayCanvas.addEventListener('mousemove', (event) => {
        if (!isDrawing) return;
        endX = event.offsetX;
        endY = event.offsetY;
        drawOverlay();
    });

    overlayCanvas.addEventListener('mouseup', () => {
        debugger;
        isDrawing = false;

        // Store the drawn rectangle data
        let rect = {
            x: startX,
            y: startY,
            width: endX - startX,
            height: endY - startY
        };
        rectangles.push(rect);

        // Find words inside the selected area
        words.forEach(word => {
            if (isWordInsideRectangle(word)) {
                contentArray.push(word.content);
                boundingBoxArray.push(word.polygon);
            }
        });

        drawOverlay(); // Redraw to include the new rectangle
    });

    function drawOverlay() {
        // Clear the canvas
        ctxOverlay.clearRect(0, 0, overlayCanvas.width, overlayCanvas.height);

        // Draw all previously stored rectangles
        // rectangles.forEach(rect => {
        //     ctxOverlay.strokeStyle = "red";
        //     ctxOverlay.lineWidth = 2;
        //     ctxOverlay.strokeRect(rect.x, rect.y, rect.width, rect.height);
        // });

        // Draw the current rectangle if still drawing
        //if (isDrawing) {
        ctxOverlay.strokeStyle = "red";
        ctxOverlay.lineWidth = 2;
        ctxOverlay.strokeRect(startX, startY, endX - startX, endY - startY);
        //   }
    }

    function isWordInsideRectangle(word) {
        let rect = {
            x: startX,
            y: startY,
            width: endX - startX,
            height: endY - startY
        };

        let [x1, y1, x2, y2, x3, y3, x4, y4] = word.polygon;

        // Find the min/max coordinates of the word
        let wordMinX = Math.min(x1, x2, x3, x4);
        let wordMaxX = Math.max(x1, x2, x3, x4);
        let wordMinY = Math.min(y1, y2, y3, y4);
        let wordMaxY = Math.max(y1, y2, y3, y4);

        rect.x = rect.x / 72;
        rect.y = rect.y / 72;
        rect.width = rect.width / 72;
        rect.height = rect.height / 72;
        // Check if the word's bounding box overlaps with the selected rectangle
        return (
            wordMinX >= rect.x && wordMaxX <= rect.x + rect.width &&
            wordMinY >= rect.y && wordMaxY <= rect.y + rect.height
        );
    }
}


/*Create Tabs*/


const tabContainer = document.createElement("div");
tabContainer.id = "tab-container";
tabContainer.className = "tabs-wrapper";
// Create tab buttons
const tabButtons = document.createElement("div");
tabButtons.id = "tab-buttons";
tabButtons.className = "tabs-header";

const fieldsTabButton = document.createElement("button");
fieldsTabButton.innerText = "Fields";
fieldsTabButton.className = "tab-button fields-button";
fieldsTabButton.classList.add("active");
fieldsTabButton.onclick = () => switchTab("fields");

const tablesTabButton = document.createElement("button");
tablesTabButton.innerText = "Tables";
tablesTabButton.className = "tab-button tables-button";
tablesTabButton.onclick = () => switchTab("tables");

tabButtons.appendChild(fieldsTabButton);
tabButtons.appendChild(tablesTabButton);

// Create tab contents
const fieldsTab = document.createElement("div");
fieldsTab.id = "fields";
fieldsTab.className = "tab-content fields-content";

const createFieldButton = document.createElement("button");
createFieldButton.innerText = "Create New Field";
createFieldButton.className = "create-button";

const fieldsContainer = document.createElement("div");
fieldsContainer.id = "fields-container";
fieldsContainer.className = "content-container";

fieldsTab.appendChild(createFieldButton);
fieldsTab.appendChild(fieldsContainer);

const tablesTab = document.createElement("div");
tablesTab.id = "tables";
tablesTab.className = "tab-content tables-content";
tablesTab.style.display = "none";

const createTableButton = document.createElement("button");
createTableButton.innerText = "Create New Table";
createTableButton.className = "create-button";

const tablesContainer = document.createElement("div");
tablesContainer.id = "tables-container";
tablesContainer.className = "content-container";


tablesTab.appendChild(createTableButton);
tablesTab.appendChild(tablesContainer);

// Append everything to main container
tabContainer.appendChild(tabButtons);
tabContainer.appendChild(fieldsTab);
tabContainer.appendChild(tablesTab);
tabContainerColumn = document.getElementById('platform_id_4mszTiuY-2');

// Append to body
tabContainerColumn.appendChild(tabContainer);


function switchTab(tabId) {
    fieldsTabButton.classList.remove("active");
    tablesTabButton.classList.remove("active");
    if (tabId === "fields") {
        fieldsTabButton.classList.add("active");
    } else if (tabId === "tables") {
        tablesTabButton.classList.add("active");
    }
    document.getElementById("fields").style.display = tabId === "fields" ? "block" : "none";
    document.getElementById("tables").style.display = tabId === "tables" ? "block" : "none";
}

createFieldButton.onclick = function () {
    debugger;
    let popup = document.getElementById('popup');

    // Remove existing popup if it exists
    if (popup) {
        popup.remove();
    }

    popup = document.createElement('div');
    popup.id = 'popup';
    popup.style.position = 'absolute';

    // Get button position
    const buttonRect = createFieldButton.getBoundingClientRect();
    const scaleFactor = window.devicePixelRatio || 1;

    // Define popup width (adjust as needed)
    const popupWidth = 350; // Set a fixed width or calculate dynamically

    // Calculate left position to extend left if width is greater
    let leftPosition = buttonRect.left + window.scrollX;
    if (popupWidth > buttonRect.width) {
        leftPosition = buttonRect.left + window.scrollX - (popupWidth - buttonRect.width);
    }

    // Set position and styling
    popup.style.setProperty("top", "169px", "important");
    //popup.style.left = `${leftPosition}px !important`;
    popup.style.setProperty("left", `${leftPosition}px`, "important");
    popup.style.width = `${popupWidth}px`;
    popup.style.padding = '20px';
    popup.style.backgroundColor = 'white';
    popup.style.border = '1px solid #ccc';
    popup.style.boxShadow = '0 2px 10px rgba(0, 0, 0, 0.1)';
    popup.style.transform = "none";

    // Popup Content
    popup.innerHTML = `
        <input type="text" id="fieldInput" placeholder="Create new field and hit enter" onkeydown="handleEnter(event)" style="width: 100%;"/>
        <div id="errorMessage" style="color: red; font-size: 12px; display: none;">Field cannot be empty.</div>
    `;

    fieldsContainer.appendChild(popup);
    let fieldInput = document.getElementById('fieldInput');
    fieldInput.addEventListener("keydown", handleEnter);
    popup.addEventListener('click', function (event) {
        event.stopPropagation(); // Prevent the event from propagating to the document
    });

    fieldInput.addEventListener('click', function (event) {
        event.stopPropagation(); // Prevent the event from propagating to the document
    });

    // Remove the previous document click listener if it exists
    if (window.popupClickListener) {
        document.removeEventListener("click", window.popupClickListener);
    }

    // Add a new document click listener
    window.popupClickListener = function (event) {
        if (!popup.contains(event.target) && event.target !== fieldInput) {
            closePopup1();
        }
    };

    // Delay adding the document click listener to avoid immediate closing
    setTimeout(function () {
        document.addEventListener("click", window.popupClickListener);
    }, 0);
};


function closePopup1() {
    const popup = document.getElementById('popup');
    if (popup) {
        popup.remove(); // Remove the popup from the DOM
    }
    // Remove the document click listener when the popup is closed
    if (window.popupClickListener) {
        document.removeEventListener("click", window.popupClickListener);
        window.popupClickListener = null; // Clear the reference
    }
}


createTableButton.onclick = function () {
    debugger;
    let popup = document.getElementById('popup');

    // Remove existing popup if it exists
    if (popup) {
        popup.remove();
    }

    popup = document.createElement('div');
    popup.id = 'popup';
    popup.style.position = 'absolute';

    // Get button position
    const buttonRect = createTableButton.getBoundingClientRect();
    const popupWidth = 350; // Set a fixed popup width

    // Calculate left position (extend left if popup is wider)
    let leftPosition = buttonRect.left + window.scrollX;
    if (popupWidth > buttonRect.width) {
        leftPosition = buttonRect.left + window.scrollX - (popupWidth - buttonRect.width);
    }

    // **Set fixed top position to 212px**
    popup.style.setProperty("top", "169px", "important");
    //popup.style.left = `${leftPosition}px !important`;
    popup.style.setProperty("left", `${leftPosition}px`, "important");
    popup.style.width = `${popupWidth}px`;
    popup.style.padding = '20px';
    popup.style.backgroundColor = 'white';
    popup.style.border = '1px solid #ccc';
    popup.style.boxShadow = '0 2px 10px rgba(0, 0, 0, 0.1)';
    popup.style.transform = "none";

    // Popup Content
    popup.innerHTML = `
        <input type="text" id="tableInput" placeholder="Create table field and hit enter" onkeydown="handleEnterTable(event)" style="width: 100%;"/> 
        <div id="errorMessage" style="color: red; font-size: 12px; display: none;">Table name cannot be empty.</div> 
    `;

    tablesContainer.appendChild(popup);
    let fieldInput = document.getElementById('tableInput');
    fieldInput.addEventListener("keydown", handleEnterTable);
    popup.addEventListener('click', function (event) {
        event.stopPropagation(); // Prevent the event from propagating to the document
    });

    fieldInput.addEventListener('click', function (event) {
        event.stopPropagation(); // Prevent the event from propagating to the document
    });

    // Remove the previous document click listener if it exists
    if (window.popupClickListener) {
        document.removeEventListener("click", window.popupClickListener);
    }
    // Add a new document click listener
    window.popupClickListener = function (event) {
        if (!popup.contains(event.target) && event.target !== fieldInput) {
            closePopup();
        }
    };

    // Delay adding the document click listener to avoid immediate closing
    setTimeout(function () {
        document.addEventListener("click", window.popupClickListener);
    }, 0);
}
function handleEnterTable(event) {

    if (event.key === 'Enter') {
        debugger;
        const tableName = document.getElementById("tableInput").value.trim();
        if (tableName) {
            // Adding the new field to the JSON
            jsonData.fields.push({
                "fieldKey": tableName,
                "fieldType": "Array",
                "fieldFormat": "not-specified"
            });
            console.log(jsonData); // Log the updated JSON
            createTable(tableName);
            closePopup();
        } else {
            document.getElementById("errorMessage").style.display = "block"; // Show error message
        }
    }
}
function createTable(tableName) {

    //let tableNumber = 0;

    let tableNumber = document.querySelectorAll('.table-content-container').length + 1;
    const tableContainer = document.createElement("div");
    tableContainer.id = "table-container_" + tableNumber;  // Unique container ID
    tableContainer.className = "table-content-container";

    // Create a wrapper for the input and icons
    const inputContainer = document.createElement("div");
    inputContainer.className = "input-container";

    const input = document.createElement("input");
    input.type = "text";
    input.className = "table-name-input";
    input.value = tableName;
    input.disabled = true; // Initially disable the input field

    // Create the SVG settings icon
    const settingsIcon = document.createElementNS("http://www.w3.org/2000/svg", "svg");
    settingsIcon.setAttribute("class", "svg-inline--fa fa-gear settings-icon");
    settingsIcon.setAttribute("aria-hidden", "true");
    settingsIcon.setAttribute("focusable", "false");
    settingsIcon.setAttribute("data-prefix", "fas");
    settingsIcon.setAttribute("data-icon", "gear");
    settingsIcon.setAttribute("role", "img");
    settingsIcon.setAttribute("xmlns", "http://www.w3.org/2000/svg");
    settingsIcon.setAttribute("viewBox", "0 0 512 512");

    const path = document.createElementNS("http://www.w3.org/2000/svg", "path");
    path.setAttribute("fill", "currentColor");
    path.setAttribute("d", "M495.9 166.6C499.2 175.2 496.4 184.9 489.6 191.2L446.3 230.6C447.4 238.9 448 247.4 448 256C448 264.6 447.4 273.1 446.3 281.4L489.6 320.8C496.4 327.1 499.2 336.8 495.9 345.4C491.5 357.3 486.2 368.8 480.2 379.7L475.5 387.8C468.9 398.8 461.5 409.2 453.4 419.1C447.4 426.2 437.7 428.7 428.9 425.9L373.2 408.1C359.8 418.4 344.1 427 329.2 433.6L316.7 490.7C314.7 499.7 307.7 506.1 298.5 508.5C284.7 510.8 270.5 512 255.1 512C241.5 512 227.3 510.8 213.5 508.5C204.3 506.1 197.3 499.7 195.3 490.7L182.8 433.6C167 427 152.2 418.4 138.8 408.1L83.14 425.9C74.3 428.7 64.55 426.2 58.63 419.1C50.52 409.2 43.12 398.8 36.52 387.8L31.84 379.7C25.77 368.8 20.49 357.3 16.06 345.4C12.82 336.8 15.55 327.1 22.41 320.8L65.67 281.4C64.57 273.1 64 264.6 64 256C64 247.4 64.57 238.9 65.67 230.6L22.41 191.2C15.55 184.9 12.82 175.3 16.06 166.6C20.49 154.7 25.78 143.2 31.84 132.3L36.51 124.2C43.12 113.2 50.52 102.8 58.63 92.95C64.55 85.8 74.3 83.32 83.14 86.14L138.8 103.9C152.2 93.56 167 84.96 182.8 78.43L195.3 21.33C197.3 12.25 204.3 5.04 213.5 3.51C227.3 1.201 241.5 0 256 0C270.5 0 284.7 1.201 298.5 3.51C307.7");

    settingsIcon.appendChild(path);

    // Add event listener to the settings icon to enable the input field when clicked
    settingsIcon.addEventListener("click", function () {
        // Check if the input is disabled and enable it when clicked
        if (input.disabled) {
            input.disabled = false;  // Enable the input field
        } else {
            input.disabled = true; // Disable the input field
        }
    });

    // Create the SVG delete icon
    const deleteIcon = document.createElementNS("http://www.w3.org/2000/svg", "svg");
    deleteIcon.setAttribute("class", "svg-inline--fa fa-trash delete-icon");
    deleteIcon.setAttribute("aria-hidden", "true");
    deleteIcon.setAttribute("focusable", "false");
    deleteIcon.setAttribute("data-prefix", "fas");
    deleteIcon.setAttribute("data-icon", "trash");
    deleteIcon.setAttribute("role", "img");
    deleteIcon.setAttribute("xmlns", "http://www.w3.org/2000/svg");
    deleteIcon.setAttribute("viewBox", "0 0 512 512");

    const deletePath = document.createElementNS("http://www.w3.org/2000/svg", "path");
    deletePath.setAttribute("fill", "currentColor");
    deletePath.setAttribute("d", "M375 64h-81.3l-9.4-28.3C283.3 19.3 270.8 0 256 0s-27.3 19.3-28.3 35.7L218.3 64H137c-18.6 0-32 14.4-32 32s14.4 32 32 32h16v352c0 17.7 14.3 32 32 32h224c17.7 0 32-14.3 32-32V128h16c18.6 0 32-14.4 32-32s-14.4-32-32-32zM368 480H144V128h224v352z");

    deleteIcon.appendChild(deletePath);

    // Add event listener to the delete icon to remove the input container
    deleteIcon.addEventListener("click", function () {
        tableContainer.remove();// Remove the entire input container (including input and icons)
    });

    // Append input and icons to input container
    inputContainer.appendChild(input);
    inputContainer.appendChild(settingsIcon);
    inputContainer.appendChild(deleteIcon);

    // Append input container to table container
    tableContainer.appendChild(inputContainer);




    document.body.appendChild(tableContainer);

    const table = document.createElement("table");
    table.setAttribute('data-table-id', 'table-' + tableNumber);  // Unique identifier for the table
    tableContainer.appendChild(table);

    table.id = "dynamicTable";
    const thead = document.createElement("thead");
    const tbody = document.createElement("tbody");
    table.appendChild(thead);
    table.appendChild(tbody);
    tableContainer.appendChild(table);
    tablesContainer.appendChild(tableContainer);
    table.setAttribute("name", tableName);

    createHeader(thead);
    createRow(tbody, 0);

    thead.addEventListener("click", function (event) {
        debugger;
        if (event.target.classList.contains("down-arrow")) {
            const columnIndex = Array.from(event.target.parentElement.parentElement.children).indexOf(event.target.parentElement);
            showPopup(event.target, ["Rename Column", "Insert Column", "Delete Column"], action => {
                if (action === "Insert Column") {
                    insertColumnAt(columnIndex, thead, tbody);
                } else if (action === "Delete Column") {
                    deleteColumn(columnIndex, thead, tbody, table);
                }
                else if (action === "Rename Column") {
                    renameColumn(columnIndex, thead, table);
                }
            });
        }
    });
    tbody.addEventListener("click", function (event) {
        debugger;
        if (event.target.classList.contains("down-arrow")) {
            const rowIndex = Array.from(event.target.closest("tr").parentElement.children).indexOf(event.target.closest("tr"));
            showPopup(event.target, ["Insert Row", "Delete Row"], action => {
                if (action === "Insert Row") {
                    insertRowBelow(rowIndex, thead, tbody, table);
                } else if (action === "Delete Row") {
                    deleteRow(rowIndex, tbody, table);
                }
            });
        }
    });
    tbody.addEventListener("click", function (event) {
        debugger;
        if (event.target.tagName === "TD" && !event.target.classList.contains("down-arrow")) {
            const clickedCell = event.target;
            const rowIndex = Array.from(tbody.children).indexOf(clickedCell.parentElement);
            const colIndex = Array.from(clickedCell.parentElement.children).indexOf(clickedCell);
            const colName = thead.children[0].children[colIndex].querySelector('.editable-span').textContent.trim();

            if (contentArray.length > 0 && boundingBoxArray.length > 0) {
                const labelName = tableName + "/" + rowIndex + "/" + colName; // Get label name
                let existingLabel = jsonStructure.labels.find(l => l.label === labelName);

                if (!existingLabel) {
                    // Create a new label object if it doesn't exist
                    existingLabel = {
                        label: labelName,
                        value: []
                    };
                    jsonStructure.labels.push(existingLabel);
                }

                // Add values to the existing label object
                contentArray.forEach((text, i) => {
                    const canvas = document.getElementsByClassName("pdf-page")[0];

                    // Get its rendered size on the page
                    const rect = canvas.getBoundingClientRect();
                    const renderedWidth = rect.width;
                    const renderedHeight = rect.height;

                    const scaledBoundingBox = boundingBoxArray[i].map((value, index) => {
                        if (index % 2 === 0) {
                            // x-coordinate: multiply by 72 then divide by the rendered width
                            return value * 72 / renderedWidth;
                        } else {
                            // y-coordinate: multiply by 72 then divide by the rendered height
                            return value * 72 / renderedHeight;
                        }
                    });
                    let valueObject = {
                        page: 1, // Keep page as 1
                        text: text, // Use text from contentArray
                        boundingBoxes: scaledBoundingBox // Use boundingBox from boundingBoxArray
                    };
                    existingLabel.value.push(valueObject);
                    //   drawRectangle(boundingBoxArray[i]);
                });
                function drawRectangle(coords) {
                    const canvas = document.getElementsByClassName("pdf-page")[0];
                    const ctx = canvas.getContext("2d");
                    const points = [
                        { x: coords[0], y: coords[1] },
                        { x: coords[2], y: coords[3] },
                        { x: coords[4], y: coords[5] },
                        { x: coords[6], y: coords[7] }
                    ];
                    const zoomLevel = getZoomLevel();
                    function getZoomLevel() {
                        const screenWidth = window.innerWidth;
                        const docWidth = document.documentElement.clientWidth;
                        return screenWidth / docWidth;
                    }
                    // Convert the points to the correct scale/viewport space
                    points.forEach(point => {
                        point.x = point.x * 72 * zoomLevel;
                        point.y = point.y * 72 * zoomLevel;
                    });
                    // Draw the polygon on the canvas
                    ctx.beginPath();
                    ctx.moveTo(points[0].x, points[0].y);

                    // Draw lines to the other points
                    points.forEach((point, index) => {
                        if (index > 0) {
                            ctx.lineTo(point.x, point.y);
                        }
                    });

                    // Close the path (complete the polygon)
                    ctx.closePath();

                    // Apply styling for the highlight (e.g., semi-transparent fill)

                    // Apply styling for the highlight (e.g., semi-transparent fill)
                    // ctx.fillStyle = 'rgba(255, 0, 0, 0.3)'; // Red with transparency
                    // ctx.fill();
                    ctx.lineWidth = 2;
                    ctx.strokeStyle = 'red';
                    ctx.stroke();
                }

                // Append the new values to the existing input value
                const existingValue = clickedCell.textContent.trim();
                clickedCell.textContent = existingValue
                    ? existingValue + " " + contentArray.join(" ")
                    : contentArray.join(" ");

                // Log the updated JSON structure (for debugging)
                console.log(JSON.stringify(jsonStructure, null, 2));

                contentArray.length = 0;
                boundingBoxArray.length = 0;
            }


            // Show Selected Cell Info
            console.log(`Row: ${rowIndex}, Column: ${colName}`);
            document.getElementById("selectedCellInfo").textContent = `Row: ${rowIndex}, Column: ${colName}`;
        }
    });
}
function createHeader(thead) {
    const headerRow = document.createElement("tr");
    const firstHeaderCell = document.createElement("th");
    firstHeaderCell.textContent = "#";
    headerRow.appendChild(firstHeaderCell);

    const headerCell = document.createElement("th");
    headerCell.classList.add("header-cell");


    const textSpan = document.createElement("span");
    textSpan.innerText = "Column 1"; // Editable text
    textSpan.classList.add('editable-span');
    headerCell.appendChild(textSpan);

    const iconSpan = document.createElement("span");
    iconSpan.classList.add("down-arrow");
    iconSpan.innerHTML = "^";

    // Append the icon to the header cell
    headerCell.appendChild(iconSpan);


    headerRow.appendChild(headerCell);
    thead.appendChild(headerRow);
}

function createRow(tbody, rowNumber) {
    const row = document.createElement("tr");

    const indexCell = document.createElement("td");
    indexCell.innerHTML = `#${rowNumber}`;


    const iconSpan = document.createElement("span");
    iconSpan.classList.add("down-arrow"); // Use the same class name
    iconSpan.innerHTML = "^"; // Use the caret symbol
    iconSpan.style.transform = "rotate(180deg)"; // Rotate the caret to point downward
    indexCell.appendChild(iconSpan);

    row.appendChild(indexCell);

    const cell = document.createElement("td");
    cell.contentEditable = "true";
    row.appendChild(cell);
    tbody.appendChild(row);
}
// Function to close the popup
function closePopup() {

    const popup = document.getElementById("popup");
    if (popup) {
        popup.remove(); // Remove the popup from the DOM
    }
}


function showPopup(target, options, callback) {

    let popup = document.getElementById("popup-menu");
    if (!popup) {
        popup = document.createElement("div");
        popup.id = "popup-menu";
        popup.classList.add("popup-menu");
        document.body.appendChild(popup);
    }

    popup.innerHTML = "";
    options.forEach(option => {
        const button = document.createElement("button");
        button.textContent = option;
        button.onclick = () => {
            callback(option);
            popup.style.display = "none";
        };
        popup.appendChild(button);
    });


    
    const rect = target.getBoundingClientRect();
    const gapX = 70; // Horizontal gap for better positioning
    const gapY = 70;  // Vertical gap for better positioning

    const table = target.closest('table');
    if (!table) return;

    // Find the correct table container using the unique ID
    const tableContainer = table.closest('.table-content-container');
    if (!tableContainer) return;

    // Get popup dimensions after rendering
    setTimeout(() => {
    const popupWidth = popup.offsetWidth;
    const popupHeight = popup.offsetHeight;


    // **Positioning Adjustments**
    let leftPosition = rect.right - popupWidth + gapX; // Align to right-bottom corner
    let topPosition = rect.bottom + gapY; // Align below the element

    // **Ensure it stays within viewport**
    const viewportWidth = window.innerWidth;
    const viewportHeight = window.innerHeight;

    // If popup overflows the right side, shift it left
    if (leftPosition + popupWidth > viewportWidth) {
        leftPosition = rect.right - popupWidth - gapX;
    }

    // If popup overflows the bottom, shift it up
    if (topPosition + popupHeight > viewportHeight) {
        topPosition = rect.top - popupHeight - gapY;
    }



    //const topPosition = 347;
    // Set the popup position and override with !important
    popup.style.position = "absolute";
    popup.style.setProperty('top', `${topPosition}px`, 'important');
    popup.style.setProperty('left', `${leftPosition}px`, 'important');

    // Set display properties
    popup.style.display = "block";
    popup.style.boxShadow = "rgba(0, 0, 0, 0.2) 0px 2px 10px";
    popup.style.display = "flex";
    popup.style.flexDirection = "column";
}, 0);
}


document.addEventListener("click", function (event) {
    const popup = document.getElementById("popup-menu");
    if (popup && !popup.contains(event.target) && !event.target.classList.contains("down-arrow")) {
        popup.style.display = "none";
    }
});


function renameColumn(columnIndex, thead, table) {
    debugger;
    const headerCell = table.querySelector(`thead tr th:nth-child(${columnIndex + 1})`); // Select the corresponding header cell
    const editableSpan = headerCell.querySelector(".editable-span");
    editableSpan.setAttribute("contenteditable", "true");
    editableSpan.classList.add("editable");
    editableSpan.focus();
    editableSpan.addEventListener("keydown", (event) => {
        if (event.key === "Enter") {
            event.preventDefault(); // Prevents line break in contenteditable
            editableSpan.removeAttribute("contenteditable");
            editableSpan.classList.remove("editable");
            console.log("New Header Value:", editableSpan.textContent.trim());
        }
    });
}
function insertColumnAt(index, thead, tbody) {
    const columnCount = thead.children[0].children.length;

    const headerCell = document.createElement("th");
    headerCell.classList.add("header-cell");


    const textSpan = document.createElement("span");
    textSpan.innerText = `Column ${columnCount}`; // Editable text
    textSpan.classList.add('editable-span');
    headerCell.appendChild(textSpan);

    const iconSpan = document.createElement("span");
    iconSpan.classList.add("down-arrow");
    iconSpan.innerHTML = "^";

    // Append the icon to the header cell
    headerCell.appendChild(iconSpan);



    thead.children[0].insertBefore(headerCell, thead.children[0].children[index + 1]);

    Array.from(tbody.children).forEach(row => {
        const newCell = document.createElement("td");
        newCell.contentEditable = "true";
        row.insertBefore(newCell, row.children[index + 1]);
    });
}

function deleteColumn(index, thead, tbody, table) {
    debugger;
    const columnName = thead.children[0].children[index].querySelector('.editable-span').textContent.trim();

    let tableName = table.getAttribute("name");
    const columnLabelPrefix = `${tableName}/`;
    // Filter out all labels that match the column name
    jsonStructure.labels = jsonStructure.labels.filter(l =>
        !(l.label.startsWith(columnLabelPrefix) && l.label.endsWith(`/${columnName}`))
    );
    console.log(jsonStructure);
    if (thead.children[0].children.length > 1) {
        thead.children[0].children[index].remove();

        Array.from(tbody.children).forEach(row => {
            row.children[index].remove();
        });
    }

}

function insertRowBelow(index, thead, tbody, table) {
    debugger;
    const row = document.createElement("tr");
    const rowCount = (tbody.children.length - 1) + 1;

    const indexCell = document.createElement("td");
    indexCell.innerHTML = `#${rowCount}`;

    const iconSpan = document.createElement("span");
    iconSpan.classList.add("down-arrow"); // Use the same class name
    iconSpan.innerHTML = "^"; // Use the caret symbol
    iconSpan.style.transform = "rotate(180deg)"; // Rotate the caret to point downward

    indexCell.appendChild(iconSpan);




    row.appendChild(indexCell);

    Array.from(thead.children[0].children).slice(1).forEach(() => {
        const cell = document.createElement("td");
        cell.contentEditable = "true";
        row.appendChild(cell);
    });

    tbody.insertBefore(row, tbody.children[index + 1]);
    try {
        updateRowNumbers(tbody);
    }
    catch {
        closePopup();
    }
    closePopup();
}

function deleteRow(index, tbody, table) {
    debugger;

    let rowLabel = table.getAttribute("name") + "/" + index;
    jsonStructure.labels = jsonStructure.labels.filter(l => l.label.startsWith(rowLabel));
    console.log(jsonStructure);
    if (tbody.children.length > 1) {
        tbody.children[index].remove();
        try {
            updateRowNumbers(tbody);
        }
        catch {
            closePopup();
        }

    }
    closePopup();
}
function updateRowNumbers(tbody) {
    Array.from(tbody.children).forEach((row, i) => {
        const iconSpan = document.createElement("span");
        iconSpan.classList.add("down-arrow"); // Use the same class name
        iconSpan.innerHTML = "^"; // Use the caret symbol
        iconSpan.style.transform = "rotate(180deg)"; //
        row.children[0].textContent(iconSpan);
        row.children[0].innerHTML = `#${i}`;

    });
}



function handleEnter(event) {

    if (event.key === 'Enter') {
        const fieldValue = document.getElementById("fieldInput").value.trim();
        if (fieldValue) {
            // Adding the new field to the JSON
            jsonData.fields.push({
                "fieldKey": fieldValue,
                "fieldType": "string",
                "fieldFormat": "not-specified"
            });
            console.log(jsonData); // Log the updated JSON
            addField(fieldValue);
            closePopup();
        } else {
            document.getElementById("errorMessage").style.display = "block"; // Show error message
        }
    }
}
// Function to close the popup
function closePopup() {

    const popup = document.getElementById("popup");
    if (popup) {
        popup.remove(); // Remove the popup from the DOM
    }
}

function addField(fieldKey) {
    debugger;
    // Create the field container and display elements.
    const fieldContainer = document.createElement('div');
    fieldContainer.className = 'field-container';

    const inputContainer = document.createElement('div');
    inputContainer.className = 'input-container';

    const labelContainer = document.createElement('div');
    labelContainer.className = 'label-conainer';
    // Create label element
    const fieldLabel = document.createElement('label');
    fieldLabel.className = 'field-label';
    fieldLabel.textContent = fieldKey;

    labelsArray.push(fieldLabel);
    console.log("Labels Array" + JSON.stringify(labelsArray, null, 2));

    // Create input element
    const inputField = document.createElement('input');
    inputField.className = 'field-input';
    inputField.type = 'text'; // Adjust type as needed
    inputField.placeholder = 'Enter value...'; // Optional placeholder

    // Associate label with input
    fieldLabel.htmlFor = inputField.id = `input-${fieldKey}`;


    const closeButton = document.createElement('button');
    closeButton.className = 'close-button';
    closeButton.innerHTML = '&times;'; // Close icon (× symbol)
    closeButton.id = `close-${fieldKey}`; // Set unique id for the close button

    // Create settings button
    const button = document.createElement('button');
    button.className = 'settings-button';
    const settingsBtn = document.createElement('i');
    settingsBtn.className = 'fa fa-cog settings-btn';
    button.appendChild(settingsBtn);

    // Append elements




    // Set up field data (JSON will be updated with these values).
    let fieldData = {
        fieldKey: fieldKey,
        fieldType: null,
        fieldFormat: "not-specified",
        subType: null // Add subType to fieldData
    };

    // -------------------------------
    // Create Primary Modal (Field Type Selection)
    const modalPrimary = document.createElement('dialog');
    modalPrimary.className = 'settings-modal';

    const primaryContent = document.createElement('div');
    primaryContent.className = 'modal-content';

    const typeContainer = document.createElement('div');
    typeContainer.className = 'type-container';

    const types = [
        { name: 'Sub Type', value: 'sub-type', hasSubCategory: true },
        { name: 'Rename', value: 'rename', hasSubCategory: false },
        { name: 'Delete', value: 'delete', hasSubCategory: false }
    ];

    types.forEach(type => {
        const typeButton = document.createElement('button');
        typeButton.className = 'type-button';
        //typeButton.textContent = type.name;

        typeButton.style.display = 'flex';
        typeButton.style.alignItems = 'center'; // Align items vertically centered
        typeButton.style.gap = '8px'; // Add some space between the icon and text
        const icon = document.createElement('i'); // Create an <i> element for the icon
        icon.className = `fa-solid ${getIconClass(type.value)}`; // Dynamically set the icon class based on the type

        // Create a text span for the button name
        const buttonText = document.createElement('span');
        buttonText.textContent = type.name;

        // Append the icon and the text to the button
        typeButton.appendChild(icon);
        typeButton.appendChild(buttonText);




        // Create a span for the icon name and arrow for "sub-type"
        if (type.value === 'sub-type') {

            const arrow = document.createElement('span');
            arrow.textContent = ' <-'; // Add the left arrow

            // Append icon name and arrow after the main text

            typeButton.appendChild(arrow);
        } else {
            // For other types, just append the text
            typeButton.appendChild(buttonText);
        }


        typeButton.addEventListener('click', function () {
            fieldData.fieldType = type.value;
            debugger;

            if (type.value === 'sub-type') {
                // Find the correct settings-modal (closest to the clicked button)
                const modalPrimary = this.closest('.settings-modal');
                if (!modalPrimary) return;

                // Find the corresponding subtype-modal (next sibling of the settings-modal)
                const modalSubType = modalPrimary.nextElementSibling;
                if (!modalSubType || !modalSubType.classList.contains('subtype-modal')) return;

                // Show the correct SubType modal
                modalSubType.showModal();



                // Ensure the modal is positioned absolutely
                modalSubType.style.position = "absolute";
                modalSubType.style.transform = "none";
                modalSubType.style.margin = "0";
                modalSubType.style.padding = "10px";
                modalSubType.style.border = "1px solid #ccc";
                modalSubType.style.boxShadow = "0 2px 10px rgba(0, 0, 0, 0.1)";

                // Get bounding rect of the primary modal
                const settingsRect = modalPrimary.getBoundingClientRect();

                // Position the subtype modal exactly to the left of the primary modal
                //const gap = 5; // Adjust this value for fine-tuning


                setTimeout(() => {
                    modalSubType.style.top = `${settingsRect.top + window.scrollY}px`;
                    modalSubType.style.left = `${settingsRect.left + window.scrollX - modalSubType.offsetWidth - 5}px`;

                    console.log("Opened SubType Modal at:", modalSubType.style.left, modalSubType.style.top);
                }, 0);
                //modalSubType.style.left = `${settingsRect.left + window.scrollX - modalSubType.offsetWidth - gap}px`;

                //console.log("Opened SubType Modal at:", modalSubType.style.left);

                // Ensure subtype buttons are stacked properly
                const subtypeContainer = modalSubType.querySelector('.subtype-container');
                if (subtypeContainer) {
                    subtypeContainer.style.display = 'flex';
                    subtypeContainer.style.flexDirection = 'column';
                    subtypeContainer.style.gap = '8px';
                }
            } else {
                // For Rename and Delete, update the JSON and close the primary modal.
                updateJson(fieldData);
                modalPrimary.close();
            }
        });
        typeContainer.appendChild(typeButton);
    });



    function getIconClass(typeValue) {
        switch (typeValue) {
            case 'sub-type':
                return 'fa-bookmark'; // Bookmark icon for Sub Type
            case 'rename':
                return 'fa-pen-to-square'; // Pen icon for Rename
            case 'delete':
                return 'fa-trash'; // Trash icon for Delete
            default:
                return '';
        }
    }
    primaryContent.appendChild(typeContainer);
    modalPrimary.appendChild(primaryContent);
    document.body.appendChild(modalPrimary);

    // -------------------------------
    // Create Secondary Modal (Sub Type Selection)
    const modalSubType = document.createElement('dialog');
    modalSubType.className = 'subtype-modal';

    const subTypeContent = document.createElement('div');
    subTypeContent.className = 'modal-content';

    const subTypeContainer = document.createElement('div');
    subTypeContainer.className = 'subtype-container';

    // Update subTypes to include 'String', 'Number', 'Date', 'Time', 'Integer'
    const subTypes = [
        { name: 'String', value: 'string' },
        { name: 'Integer', value: 'integer' },
        { name: 'Date', value: 'date' }
    ];

    subTypes.forEach(subType => {
        const subTypeButton = document.createElement('button');
        subTypeButton.className = 'subtype-button';
        subTypeButton.textContent = subType.name;


        const buttonText = document.createElement('span');
        buttonText.textContent = subType.name;

        // Create a span for the icon name and arrow for "Date"
        if (subType.value === 'date') {

            const arrow = document.createElement('span');
            arrow.textContent = ' <-'; // Add the left arrow

            // Append icon name and arrow after the main text

            subTypeButton.appendChild(arrow);
        } else {
            // For other types, just append the text
            //subTypeButton.appendChild(buttonText);
        }

        subTypeButton.addEventListener('click', function () {
            fieldData.subType = subType.value; // Update the subType in fieldData
            updateJson(fieldData); // Update the JSON data
            //modalSubType.close(); // Close the sub-type modal
            // If 'Date' is selected, show the date format modal

            if (subType.value === 'date') {
                modalSecondary.showModal(); // Show the modal for date format


                debugger;
                const dateFormatModal = modalSubType.nextElementSibling; // Find the relevant modal

                if (!dateFormatModal || !dateFormatModal.classList.contains('date-format-modal')) {
                    console.error("Date format modal not found!");
                    return;
                }

                // Ensure the date format modal is styled properly
                dateFormatModal.style.position = "absolute";
                dateFormatModal.style.transform = "none";
                dateFormatModal.style.margin = "0";
                dateFormatModal.style.padding = "10px";
                dateFormatModal.style.border = "1px solid #ccc";
                dateFormatModal.style.boxShadow = "0 2px 10px rgba(0, 0, 0, 0.1)";

                // Get the position of modalSubType (the entire sub-type modal)
                const subTypeModalRect = modalSubType.getBoundingClientRect();

                // Calculate the left position for the date format modal
                const dateFormatLeft = subTypeModalRect.left + window.scrollX - dateFormatModal.offsetWidth - 5;

                // Apply the top and left positioning
                dateFormatModal.style.top = `${subTypeModalRect.top + window.scrollY}px`;
                dateFormatModal.style.left = `${dateFormatLeft}px`;

                console.log("Date format modal position - Left:", dateFormatModal.style.left);
                console.log("Date format modal position - Top:", dateFormatModal.style.top);
            }

            // Optionally close the primary modal if needed
            // modalPrimary.close();
        });

        subTypeContainer.appendChild(subTypeButton);
    });



    subTypeContent.appendChild(subTypeContainer);
    modalSubType.appendChild(subTypeContent);
    document.body.appendChild(modalSubType);

    // -------------------------------
    // Create Secondary Modal (Date Format Selection)
    // Create Secondary Modal (Date Format Selection)
    // Create Secondary Modal (Date Format Selection)
    // Create Secondary Modal (Date Format Selection)
    // Create Secondary Modal (Date Format Selection)
    const modalSecondary = document.createElement('dialog');
    modalSecondary.className = 'date-format-modal';

    const secondaryContent = document.createElement('div');
    secondaryContent.className = 'modal-content';

    const formatContainer = document.createElement('div');
    formatContainer.className = 'format-container';
    formatContainer.style.display = 'flex';
    formatContainer.style.flexDirection = 'column'; // Stack buttons vertically
    formatContainer.style.gap = '8px'; // Add spacing

    ['DMY', 'YMD'].forEach(format => {
        const formatButton = document.createElement('button');
        formatButton.className = 'format-button';
        formatButton.textContent = format;
        formatButton.addEventListener('click', function () {
            fieldData.fieldFormat = format.toLowerCase();
            updateJson(fieldData);
            modalSecondary.close();
            modalSubType.close(); // Close subtype modal as well if needed
        });
        formatContainer.appendChild(formatButton);
    });

    secondaryContent.appendChild(formatContainer);
    modalSecondary.appendChild(secondaryContent);
    document.body.appendChild(modalSecondary);

    // Function to position modalSecondary to the left of modalSubType
    // Function to position date-format-modal exactly left of subtype-modal
    // Function to position date-format-modal exactly left of subtype-modal



    secondaryContent.appendChild(formatContainer);
    modalSecondary.appendChild(secondaryContent);
    document.body.appendChild(modalSecondary);

    // -------------------------------
    // JSON Update Helper Function
    function updateJson(data) {
        let existingField = jsonData.fields.find(field => field.fieldKey === fieldKey);
        if (existingField) {
            existingField.fieldType = data.fieldType;
            existingField.fieldFormat = data.fieldFormat;
            existingField.subType = data.subType; // Update the subtype in the JSON
        } else {
            jsonData.fields.push(data);
        }
        console.log(jsonData);
    }


    // -------------------------------
    // Reset modal state on each click so that they appear fresh.
    button.addEventListener('click', function (e) {
        debugger;
        // Reset the fieldData values.
        fieldData.fieldType = null;
        fieldData.fieldFormat = "not-specified";

        // Ensure both modals are closed before opening.
        if (modalPrimary.open) modalPrimary.close();
        if (modalSecondary.open) modalSecondary.close();

        const buttonRect = button.getBoundingClientRect();
        const modalWidth = 130; // Set fixed modal width

        // Calculate left position (shift left if modal is wider)
        let leftPosition = buttonRect.left + window.scrollX;
        if (modalWidth > buttonRect.width) {
            leftPosition = buttonRect.left + window.scrollX - (modalWidth - buttonRect.width);
        }

        // Adjust modal position to appear directly below the button
        modalPrimary.style.position = "absolute";
        modalPrimary.style.transform = "none";  // Remove default centering
        modalPrimary.style.margin = "0";  // Remove default spacing
        modalPrimary.style.padding = "10px";
        modalPrimary.style.border = "1px solid #ccc";
        modalPrimary.style.boxShadow = "0 2px 10px rgba(0, 0, 0, 0.1)";

        // **Set fixed top position to appear below the button**
        modalPrimary.style.top = `${buttonRect.bottom + window.scrollY}px`;
        modalPrimary.style.left = `${leftPosition}px`;
        //modalPrimary.style.width = `${modalWidth}px`;

        const typeContainer = modalPrimary.querySelector('.type-container');
        if (typeContainer) {
            typeContainer.style.display = "flex";
            typeContainer.style.flexDirection = "column";
            typeContainer.style.gap = "8px";  // Adjust for spacing
        }


        modalPrimary.showModal();

        e.stopPropagation();
    });

    function closeModals(event) {
        debugger;
        // Get only the open modals
        const modalPrimary = document.querySelector('.settings-modal[open]');
        const modalSecondary = document.querySelector('.subtype-modal[open]');
        const dateFormatModal = document.querySelector('.date-format-modal[open]');

        // Safely get modal content elements if the modals exist
        const modalContent1 = modalPrimary ? modalPrimary.querySelector('.modal-content') : null;
        const modalContent2 = modalSecondary ? modalSecondary.querySelector('.modal-content') : null;
        const dateFormatContent = dateFormatModal ? dateFormatModal.querySelector('.modal-content') : null;

        // Check if click is inside any modal (if the content exists)
        const isClickInsidePrimary = modalContent1 ? modalContent1.contains(event.target) : false;
        const isClickInsideSecondary = modalContent2 ? modalContent2.contains(event.target) : false;
        const isClickInsideDateFormat = dateFormatContent ? dateFormatContent.contains(event.target) : false;

        // Close settings and subtype modals if click is on the "String" or "Integer" button inside the secondary modal
        if (isClickInsideSecondary && (event.target.textContent === 'String' || event.target.textContent === 'Integer')) {
            if (modalPrimary && modalPrimary.open) {
                modalPrimary.close();
            }
            if (modalSecondary && modalSecondary.open) {
                modalSecondary.close();
            }
        }

        // Close all modals if click is inside the date format modal
        if (isClickInsideDateFormat) {
            if (dateFormatModal && dateFormatModal.open) {
                dateFormatModal.close();
            }
            if (modalSecondary && modalSecondary.open) {
                modalSecondary.close();
            }
            if (modalPrimary && modalPrimary.open) {
                modalPrimary.close();
            }
        }

        // If click is outside of all modals, close any open modal(s)
        if (!isClickInsidePrimary && !isClickInsideSecondary && !isClickInsideDateFormat) {
            if (dateFormatModal && dateFormatModal.open) {
                dateFormatModal.close();
            } else if (modalSecondary && modalSecondary.open) {
                modalSecondary.close();
            } else if (modalPrimary && modalPrimary.open) {
                modalPrimary.close();
            }
        }
    }


    // Attach event listener to close modals when clicking outside
    document.addEventListener("click", closeModals);

    // labelContainer.appendChild(fieldLabel);
    // labelContainer.appendChild(button);
    // inputContainer.appendChild(labelContainer);
    // inputContainer.appendChild(inputField);
    // inputContainer.appendChild(closeButton);
    // fieldContainer.appendChild(inputContainer);
    labelContainer.appendChild(fieldLabel);
    labelContainer.appendChild(button);
    inputContainer.appendChild(inputField);
    inputContainer.appendChild(closeButton);
    fieldContainer.appendChild(labelContainer);
    fieldContainer.appendChild(inputContainer);


    document.getElementById('fields-container').appendChild(fieldContainer);

    closeButton.onclick = () => {
        const inputContainer = closeButton.closest('.input-container');

        // Retrieve the label element and extract its text content (trimmed)
        const labelElement = inputContainer.querySelector('.field-label');
        const labelText = labelElement.textContent.trim();
        const inputField = inputContainer.querySelector('.field-input');
        // Find the index of the label in jsonStructure.labels that matches the label text
        const labelIndex = jsonStructure.labels.findIndex(l => l.label === labelText);

        // If the label exists in the JSON structure, remove it
        if (labelIndex !== -1) {
            jsonStructure.labels.splice(labelIndex, 1);
            console.log(`Removed label: ${labelText}`);
        } else {
            console.log(`Label "${labelText}" not found in JSON structure.`);
        }
        inputField.value = '';
        // (Optional) Log the updated JSON structure for verification
        console.log(JSON.stringify(jsonStructure, null, 2));
    };





    document.querySelectorAll('.field-input').forEach(function (inputBox) {
        inputBox.addEventListener('click', function () {
            debugger;
            let container = inputBox.closest(".input-container");
            const canvas = document.getElementsByClassName("pdf-page")[0];

            // Get its rendered size on the page
            const rect = canvas.getBoundingClientRect();
            const renderedWidth = rect.width;
            const renderedHeight = rect.height;
            // Get the label text
            if (container) {
                let label = container.parentElement.querySelector(".field-label");
                if (label) {
                    console.log("Selected Label:", label.textContent);
                    if (contentArray.length > 0 && boundingBoxArray.length > 0) {

                        const labelName = label.textContent.trim(); // Get label name
                        let existingLabel = jsonStructure.labels.find(l => l.label === labelName);

                        if (!existingLabel) {
                            // Create a new label object if it doesn't exist
                            existingLabel = {
                                label: labelName,
                                value: []
                            };
                            jsonStructure.labels.push(existingLabel);
                        }

                        // Add values to the existing label object
                        contentArray.forEach((text, i) => {
                            const scaledBoundingBox = boundingBoxArray[i].map((value, index) => {
                                if (index % 2 === 0) {
                                    // x-coordinate: multiply by 72 then divide by the rendered width
                                    return value * 72 / renderedWidth;
                                } else {
                                    // y-coordinate: multiply by 72 then divide by the rendered height
                                    return value * 72 / renderedHeight;
                                }
                            });
                            let valueObject = {
                                page: 1, // Keep page as 1
                                text: text, // Use text from contentArray
                                boundingBoxes: scaledBoundingBox // Use boundingBox from boundingBoxArray
                            };
                            existingLabel.value.push(valueObject);
                        });
                        rubberBinding(boundingBoxArray);
                        arrow(inputBox, boundingBoxArray[0]);
                        const inputId = label.getAttribute("for");
                        const inputElement = document.getElementById(inputId);
                        if (inputElement) {
                            // Append the new values to the existing input value
                            inputElement.value = contentArray.join(" ")

                        }


                        // Log the updated JSON structure (for debugging)
                        console.log(JSON.stringify(jsonStructure, null, 2));

                        contentArray.length = 0;
                        boundingBoxArray.length = 0;
                    }
                    else {
                        //Get boundingn box from json
                        const labelName = label.textContent.trim(); // Get label name
                        let boundingBoxArray = jsonStructure.labels.find(l => l.label === labelName).value[0].boundingBoxes;
                        const scaledBoundingBox = boundingBoxArray.map((value, index) => {
                            if (index % 2 === 0) {
                                // x-coordinate: multiply by 72 then divide by the rendered width
                                return value * renderedWidth / 72;
                            } else {
                                // y-coordinate: multiply by 72 then divide by the rendered height
                                return value * renderedHeight / 72;
                            }
                        });
                        //show arrow
                        arrow(inputBox, scaledBoundingBox);
                    }
                }
            }
        });
    });
}

function arrow(inputElement, boundingBox) {
    const canvas = document.getElementsByClassName("pdf-page")[0];

    const inputBoxCoordinates = inputElement.getBoundingClientRect();


    const startingPointOfArrawx = inputBoxCoordinates.left + inputBoxCoordinates.width;
    const startingPointOfArrawY = inputBoxCoordinates.top + (inputBoxCoordinates.height / 2);

    const leftMidX = (boundingBox[0] + boundingBox[6]) / 2;
    const leftMidY = (boundingBox[1] + boundingBox[7]) / 2;

    const canvasRect = canvas.getBoundingClientRect();


    const endingPointOfArrawx = canvasRect.left + (leftMidX * 72);
    const endingPointOfArrawY = canvasRect.top + (leftMidY * 72);

    const midX = startingPointOfArrawx + (endingPointOfArrawx - startingPointOfArrawx) / 2;
    const svg = document.querySelector("#platform_id_vG7OoRnx svg");
    const path = svg.querySelector("path");
    let arrowGroup = svg.querySelector("g");

    if (!arrowGroup) {
        arrowGroup = document.createElementNS("http://www.w3.org/2000/svg", "g");
        arrowGroup.setAttribute("fill", "rgba(0, 80, 138, 1)");
        arrowGroup.setAttribute("pointer-events", "auto");
        arrowGroup.setAttribute("opacity", "1");
        svg.appendChild(arrowGroup); // Append group to SVG

        // Create the arrowhead shape
        const arrowPath = document.createElementNS("http://www.w3.org/2000/svg", "path");
        arrowPath.setAttribute("d", "M 0 0 L 1 0.5 L 0 1 L 0.25 0.5 z");
        arrowGroup.appendChild(arrowPath); // Append arrow to group

        // Create the arrow fade-in animation
        const animateOpacity = document.createElementNS("http://www.w3.org/2000/svg", "animate");
        animateOpacity.setAttribute("dur", "0.4");
        animateOpacity.setAttribute("attributeName", "opacity");
        animateOpacity.setAttribute("from", "0");
        animateOpacity.setAttribute("to", "1");
        animateOpacity.setAttribute("begin", "indefinite");
        animateOpacity.setAttribute("repeatCount", "0");
        animateOpacity.setAttribute("fill", "freeze");
        arrowGroup.appendChild(animateOpacity); // Add fade-in animation to arrow group
        svg.appendChild(arrowGroup);
    }
    // Update the path data for the line
    const pathData = `M ${startingPointOfArrawx - 10} ${startingPointOfArrawY - 65} H ${midX} V ${endingPointOfArrawY - 62} H ${endingPointOfArrawx - 26}`;
    path.setAttribute("d", pathData);

    // Position the arrow at the endpoint
    arrowGroup.setAttribute("transform", `translate(${endingPointOfArrawx - 28}, ${endingPointOfArrawY - 68}) scale(15)`);
    function removeArrow(event) {
        debugger;
        if (!inputElement.contains(event.target)) { // Check if click is outside inputElement
            path.setAttribute("d", ""); // Clear the path
            arrowGroup.remove(); // Remove the arrow group
            document.removeEventListener("click", removeArrow); // Remove event listener after execution
        }
    }

    // Attach the event listener to document
    document.addEventListener("click", removeArrow);
}

function createSVGContainer() {
    // Get the container element by ID
    const container = document.getElementById("platform_id_vG7OoRnx");

    // Create SVG element
    const svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
    svg.setAttribute("width", "100%");
    svg.setAttribute("height", "100%");
    svg.setAttribute("overflow", "visible");
    svg.style.position = "absolute";
    container.appendChild(svg); // Append the SVG to your container

    // Create the animated dashed line path
    const path = document.createElementNS("http://www.w3.org/2000/svg", "path");
    path.setAttribute("stroke", "rgba(0, 80, 138, 1)");
    path.setAttribute("stroke-dasharray", "5 2.5");
    path.setAttribute("stroke-width", "2.5");
    path.setAttribute("fill", "transparent");
    path.setAttribute("pointer-events", "visibleStroke");

    // Add animation for the dashed effect
    const animateDash = document.createElementNS("http://www.w3.org/2000/svg", "animate");
    animateDash.setAttribute("attributeName", "stroke-dashoffset");
    animateDash.setAttribute("values", "7.5;0");
    animateDash.setAttribute("dur", "1s");
    animateDash.setAttribute("repeatCount", "indefinite");
    path.appendChild(animateDash);
    svg.appendChild(path); // Append path to SVG

    // Create the arrowhead group
    const arrowGroup = document.createElementNS("http://www.w3.org/2000/svg", "g");
    arrowGroup.setAttribute("fill", "rgba(0, 80, 138, 1)");
    arrowGroup.setAttribute("pointer-events", "auto");
    arrowGroup.setAttribute("opacity", "1");
    svg.appendChild(arrowGroup); // Append group to SVG

    // Create the arrowhead shape
    const arrowPath = document.createElementNS("http://www.w3.org/2000/svg", "path");
    arrowPath.setAttribute("d", "M 0 0 L 1 0.5 L 0 1 L 0.25 0.5 z");
    arrowGroup.appendChild(arrowPath); // Append arrow to group

    // Create the arrow fade-in animation
    const animateOpacity = document.createElementNS("http://www.w3.org/2000/svg", "animate");
    animateOpacity.setAttribute("dur", "0.4");
    animateOpacity.setAttribute("attributeName", "opacity");
    animateOpacity.setAttribute("from", "0");
    animateOpacity.setAttribute("to", "1");
    animateOpacity.setAttribute("begin", "indefinite");
    animateOpacity.setAttribute("repeatCount", "0");
    animateOpacity.setAttribute("fill", "freeze");
    arrowGroup.appendChild(animateOpacity); // Add fade-in animation to arrow group
}